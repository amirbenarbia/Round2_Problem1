
J2F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa0  08008fa0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa8  08008fa8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa8  08008fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000854  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0f7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc0  00000000  00000000  0003a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cf  00000000  00000000  000404c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0f3  00000000  00000000  00064a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd3f  00000000  00000000  0007fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d8c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000552c  00000000  00000000  0014d91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f6c 	.word	0x08008f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08008f6c 	.word	0x08008f6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_UART_RxCpltCallback>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if (!strncmp(buffer,ping,4)){
 80004d4:	2204      	movs	r2, #4
 80004d6:	4912      	ldr	r1, [pc, #72]	; (8000520 <HAL_UART_RxCpltCallback+0x54>)
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <HAL_UART_RxCpltCallback+0x58>)
 80004da:	f008 fd25 	bl	8008f28 <strncmp>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d10b      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x30>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <HAL_UART_RxCpltCallback+0x5c>)
 80004ea:	f001 f8f2 	bl	80016d2 <HAL_GPIO_TogglePin>
		flag=1;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_UART_RxCpltCallback+0x60>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
		flag2=0;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_UART_RxCpltCallback+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	}
	else if(!strncmp(buffer,pong,4)){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	}

}
 80004fa:	e00c      	b.n	8000516 <HAL_UART_RxCpltCallback+0x4a>
	else if(!strncmp(buffer,pong,4)){
 80004fc:	2204      	movs	r2, #4
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <HAL_UART_RxCpltCallback+0x68>)
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <HAL_UART_RxCpltCallback+0x58>)
 8000502:	f008 fd11 	bl	8008f28 <strncmp>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d104      	bne.n	8000516 <HAL_UART_RxCpltCallback+0x4a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800050c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_UART_RxCpltCallback+0x5c>)
 8000512:	f001 f8de 	bl	80016d2 <HAL_GPIO_TogglePin>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	200001f4 	.word	0x200001f4
 8000528:	40020c00 	.word	0x40020c00
 800052c:	200001f8 	.word	0x200001f8
 8000530:	2000000d 	.word	0x2000000d
 8000534:	20000008 	.word	0x20000008

08000538 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &buffer, 4);
 8000540:	2204      	movs	r2, #4
 8000542:	4904      	ldr	r1, [pc, #16]	; (8000554 <HAL_UART_TxCpltCallback+0x1c>)
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <HAL_UART_TxCpltCallback+0x20>)
 8000546:	f004 f9c0 	bl	80048ca <HAL_UART_Receive_IT>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200001f4 	.word	0x200001f4
 8000558:	200001b0 	.word	0x200001b0

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fcc8 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f840 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f966 	bl	8000838 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056c:	f000 f8a6 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000570:	f000 f8d2 	bl	8000718 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000574:	f000 f900 	bl	8000778 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000578:	f008 f89c 	bl	80086b4 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 800057c:	f000 f932 	bl	80007e4 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f000 fd28 	bl	8000fd8 <HAL_Delay>
	if(flag2){
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <main+0x74>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d004      	beq.n	800059a <main+0x3e>
	    	HAL_UART_Transmit_IT(&huart3, (uint8_t*)&ping, 4);
 8000590:	2204      	movs	r2, #4
 8000592:	4910      	ldr	r1, [pc, #64]	; (80005d4 <main+0x78>)
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <main+0x7c>)
 8000596:	f004 f953 	bl	8004840 <HAL_UART_Transmit_IT>
	}
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&buffer, 4);
 800059a:	2204      	movs	r2, #4
 800059c:	490f      	ldr	r1, [pc, #60]	; (80005dc <main+0x80>)
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <main+0x7c>)
 80005a0:	f004 f993 	bl	80048ca <HAL_UART_Receive_IT>
    HAL_Delay(200);
 80005a4:	20c8      	movs	r0, #200	; 0xc8
 80005a6:	f000 fd17 	bl	8000fd8 <HAL_Delay>
    if(flag){
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x84>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d007      	beq.n	80005c2 <main+0x66>
    	 HAL_UART_Transmit_IT(&huart3, (uint8_t*)&pong, 4);
 80005b2:	2204      	movs	r2, #4
 80005b4:	490b      	ldr	r1, [pc, #44]	; (80005e4 <main+0x88>)
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x7c>)
 80005b8:	f004 f942 	bl	8004840 <HAL_UART_Transmit_IT>
    	 flag=0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <main+0x84>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(200);
 80005c2:	20c8      	movs	r0, #200	; 0xc8
 80005c4:	f000 fd08 	bl	8000fd8 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005c8:	f008 f89a 	bl	8008700 <MX_USB_HOST_Process>
	HAL_Delay(1000);
 80005cc:	e7d8      	b.n	8000580 <main+0x24>
 80005ce:	bf00      	nop
 80005d0:	2000000d 	.word	0x2000000d
 80005d4:	20000000 	.word	0x20000000
 80005d8:	200001b0 	.word	0x200001b0
 80005dc:	200001f4 	.word	0x200001f4
 80005e0:	200001f8 	.word	0x200001f8
 80005e4:	20000008 	.word	0x20000008

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 fb9e 	bl	8008d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000666:	2307      	movs	r3, #7
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fa38 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f9db 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fc99 	bl	8003fd4 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f9c4 	bl	8000a34 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f002 fc0f 	bl	8002f1c <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f996 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000bc 	.word	0x200000bc
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_I2S3_Init+0x54>)
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_I2S3_Init+0x58>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2S3_Init+0x54>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_I2S3_Init+0x54>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_I2S3_Init+0x54>)
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <MX_I2S3_Init+0x5c>)
 8000742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2S3_Init+0x54>)
 8000758:	f002 fd24 	bl	80031a4 <HAL_I2S_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000762:	f000 f967 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000110 	.word	0x20000110
 8000770:	40003c00 	.word	0x40003c00
 8000774:	00017700 	.word	0x00017700

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI1_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI1_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI1_Init+0x64>)
 80007ca:	f003 ff63 	bl	8004694 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f92e 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000158 	.word	0x20000158
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART3_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800081c:	f003 ffc3 	bl	80047a6 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f905 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200001b0 	.word	0x200001b0
 8000834:	40004800 	.word	0x40004800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a71      	ldr	r2, [pc, #452]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	4b6b      	ldr	r3, [pc, #428]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a6a      	ldr	r2, [pc, #424]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b68      	ldr	r3, [pc, #416]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a63      	ldr	r2, [pc, #396]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b61      	ldr	r3, [pc, #388]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a5c      	ldr	r2, [pc, #368]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b5a      	ldr	r3, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b56      	ldr	r3, [pc, #344]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a55      	ldr	r2, [pc, #340]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a4e      	ldr	r2, [pc, #312]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4849      	ldr	r0, [pc, #292]	; (8000a20 <MX_GPIO_Init+0x1e8>)
 80008fc:	f000 fed0 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2101      	movs	r1, #1
 8000904:	4847      	ldr	r0, [pc, #284]	; (8000a24 <MX_GPIO_Init+0x1ec>)
 8000906:	f000 fecb 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090a:	2200      	movs	r2, #0
 800090c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000910:	4845      	ldr	r0, [pc, #276]	; (8000a28 <MX_GPIO_Init+0x1f0>)
 8000912:	f000 fec5 	bl	80016a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	483c      	ldr	r0, [pc, #240]	; (8000a20 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fd1b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4836      	ldr	r0, [pc, #216]	; (8000a24 <MX_GPIO_Init+0x1ec>)
 800094a:	f000 fd0d 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095e:	2305      	movs	r3, #5
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	482e      	ldr	r0, [pc, #184]	; (8000a24 <MX_GPIO_Init+0x1ec>)
 800096a:	f000 fcfd 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096e:	2301      	movs	r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000972:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	482a      	ldr	r0, [pc, #168]	; (8000a2c <MX_GPIO_Init+0x1f4>)
 8000984:	f000 fcf0 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000988:	2304      	movs	r3, #4
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4825      	ldr	r0, [pc, #148]	; (8000a30 <MX_GPIO_Init+0x1f8>)
 800099c:	f000 fce4 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b2:	2305      	movs	r3, #5
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481c      	ldr	r0, [pc, #112]	; (8000a30 <MX_GPIO_Init+0x1f8>)
 80009be:	f000 fcd3 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_GPIO_Init+0x1f0>)
 80009dc:	f000 fcc4 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e0:	2320      	movs	r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_GPIO_Init+0x1f0>)
 80009f4:	f000 fcb8 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0x1e8>)
 8000a0e:	f000 fcab 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 fb9e 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ace:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <HAL_I2C_MspInit+0x8c>)
 8000aec:	f000 fc3c 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <HAL_I2S_MspInit+0xf0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d15a      	bne.n	8000c06 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b54:	23c0      	movs	r3, #192	; 0xc0
 8000b56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fc57 	bl	8004414 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b6c:	f7ff ff62 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <HAL_I2S_MspInit+0xf8>)
 8000be0:	f000 fbc2 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_I2S_MspInit+0xfc>)
 8000c02:	f000 fbb1 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	; 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40003c00 	.word	0x40003c00
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020800 	.word	0x40020800

08000c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_SPI_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_SPI_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c7a:	23e0      	movs	r3, #224	; 0xe0
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_SPI_MspInit+0x8c>)
 8000c96:	f000 fb67 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40013000 	.word	0x40013000
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <HAL_UART_MspInit+0xd4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d153      	bne.n	8000d7a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_UART_MspInit+0xd8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0xdc>)
 8000d44:	f000 fb10 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480a      	ldr	r0, [pc, #40]	; (8000d90 <HAL_UART_MspInit+0xe0>)
 8000d66:	f000 faff 	bl	8001368 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2027      	movs	r0, #39	; 0x27
 8000d70:	f000 fa31 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d74:	2027      	movs	r0, #39	; 0x27
 8000d76:	f000 fa4a 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f8da 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART3_IRQHandler+0x10>)
 8000dee:	f003 fd9d 	bl	800492c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001b0 	.word	0x200001b0

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f000 feeb 	bl	8001bdc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200005e0 	.word	0x200005e0

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f007 ff40 	bl	8008cc4 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	200001fc 	.word	0x200001fc
 8000e78:	200008f8 	.word	0x200008f8

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f007 feff 	bl	8008cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fb43 	bl	800055c <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000ee4:	08008fb0 	.word	0x08008fb0
  ldr r2, =_sbss
 8000ee8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000eec:	200008f4 	.word	0x200008f4

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f94f 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fd8a 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f967 	bl	800122a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f92f 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	20000018 	.word	0x20000018
 8000f94:	20000014 	.word	0x20000014

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000018 	.word	0x20000018
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000200 	.word	0x20000200

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000018 	.word	0x20000018

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff29 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff3e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff feb6 	bl	8000fc0 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d008      	beq.n	8001274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e052      	b.n	800131a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0216 	bic.w	r2, r2, #22
 8001282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <HAL_DMA_Abort+0x62>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	e013      	b.n	80012ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c6:	f7ff fe7b 	bl	8000fc0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d90c      	bls.n	80012ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e015      	b.n	800131a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e4      	bne.n	80012c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d004      	beq.n	8001340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00c      	b.n	800135a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2205      	movs	r2, #5
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e16b      	b.n	800165c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 815a 	bne.w	8001656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80b4 	beq.w	8001656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x310>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x324>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x328>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x330>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20a>
 800156e:	2307      	movs	r3, #7
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001572:	2308      	movs	r3, #8
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x310>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_GPIO_Init+0x334>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_GPIO_Init+0x334>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_GPIO_Init+0x334>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_GPIO_Init+0x334>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_GPIO_Init+0x334>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_GPIO_Init+0x334>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_GPIO_Init+0x334>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_GPIO_Init+0x334>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae90 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001708:	b08f      	sub	sp, #60	; 0x3c
 800170a:	af0a      	add	r7, sp, #40	; 0x28
 800170c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e054      	b.n	80017c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f007 f81c 	bl	8008770 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f004 f84a 	bl	80057f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
 800177a:	1d33      	adds	r3, r6, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f003 ffc4 	bl	800570c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f004 f841 	bl	8005812 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ae:	1d33      	adds	r3, r6, #4
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f004 f9ca 	bl	8005b4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017ca:	b590      	push	{r4, r7, lr}
 80017cc:	b089      	sub	sp, #36	; 0x24
 80017ce:	af04      	add	r7, sp, #16
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	4608      	mov	r0, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	4603      	mov	r3, r0
 80017da:	70fb      	strb	r3, [r7, #3]
 80017dc:	460b      	mov	r3, r1
 80017de:	70bb      	strb	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_HCD_HC_Init+0x28>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e076      	b.n	80018e0 <HAL_HCD_HC_Init+0x116>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333d      	adds	r3, #61	; 0x3d
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3338      	adds	r3, #56	; 0x38
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3340      	adds	r3, #64	; 0x40
 800182c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800182e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3339      	adds	r3, #57	; 0x39
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333f      	adds	r3, #63	; 0x3f
 8001850:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001854:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	78ba      	ldrb	r2, [r7, #2]
 800185a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185e:	b2d0      	uxtb	r0, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	333a      	adds	r3, #58	; 0x3a
 800186c:	4602      	mov	r2, r0
 800186e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001870:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da09      	bge.n	800188c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	333b      	adds	r3, #59	; 0x3b
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e008      	b.n	800189e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	333b      	adds	r3, #59	; 0x3b
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	333c      	adds	r3, #60	; 0x3c
 80018ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	787c      	ldrb	r4, [r7, #1]
 80018b8:	78ba      	ldrb	r2, [r7, #2]
 80018ba:	78f9      	ldrb	r1, [r7, #3]
 80018bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4623      	mov	r3, r4
 80018ce:	f004 fac3 	bl	8005e58 <USB_HC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_HCD_HC_Halt+0x1e>
 8001902:	2302      	movs	r3, #2
 8001904:	e00f      	b.n	8001926 <HAL_HCD_HC_Halt+0x3e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fd13 	bl	8006342 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	70fb      	strb	r3, [r7, #3]
 8001942:	460b      	mov	r3, r1
 8001944:	70bb      	strb	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333b      	adds	r3, #59	; 0x3b
 8001958:	78ba      	ldrb	r2, [r7, #2]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	333f      	adds	r3, #63	; 0x3f
 800196a:	787a      	ldrb	r2, [r7, #1]
 800196c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800196e:	7c3b      	ldrb	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d112      	bne.n	800199a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2203      	movs	r2, #3
 8001984:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	333d      	adds	r3, #61	; 0x3d
 8001994:	7f3a      	ldrb	r2, [r7, #28]
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e008      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3342      	adds	r3, #66	; 0x42
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80c6 	bhi.w	8001b40 <HAL_HCD_HC_SubmitRequest+0x210>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	08001b2d 	.word	0x08001b2d
 80019c4:	08001a31 	.word	0x08001a31
 80019c8:	08001aaf 	.word	0x08001aaf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019cc:	7c3b      	ldrb	r3, [r7, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	f040 80b8 	bne.w	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80b4 	bne.w	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019dc:	8b3b      	ldrh	r3, [r7, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d108      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3355      	adds	r3, #85	; 0x55
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3355      	adds	r3, #85	; 0x55
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a1a:	e093      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e089      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11d      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3355      	adds	r3, #85	; 0x55
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3342      	adds	r3, #66	; 0x42
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a5c:	e073      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3342      	adds	r3, #66	; 0x42
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
      break;
 8001a70:	e069      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3354      	adds	r3, #84	; 0x54
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3342      	adds	r3, #66	; 0x42
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
      break;
 8001a98:	e055      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3342      	adds	r3, #66	; 0x42
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e04b      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11d      	bne.n	8001af0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3355      	adds	r3, #85	; 0x55
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ada:	e034      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3342      	adds	r3, #66	; 0x42
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	e02a      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3354      	adds	r3, #84	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3342      	adds	r3, #66	; 0x42
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
      break;
 8001b16:	e016      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
      break;
 8001b2a:	e00c      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3342      	adds	r3, #66	; 0x42
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3344      	adds	r3, #68	; 0x44
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	8b3a      	ldrh	r2, [r7, #24]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	202c      	movs	r0, #44	; 0x2c
 8001b60:	fb00 f303 	mul.w	r3, r0, r3
 8001b64:	440b      	add	r3, r1
 8001b66:	334c      	adds	r3, #76	; 0x4c
 8001b68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3360      	adds	r3, #96	; 0x60
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3350      	adds	r3, #80	; 0x50
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3339      	adds	r3, #57	; 0x39
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3361      	adds	r3, #97	; 0x61
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	222c      	movs	r2, #44	; 0x2c
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	3338      	adds	r3, #56	; 0x38
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f004 fa66 	bl	800609c <USB_HC_StartXfer>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop

08001bdc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 ff67 	bl	8005ac6 <USB_GetMode>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 80f6 	bne.w	8001dec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 ff4b 	bl	8005aa0 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80ec 	beq.w	8001dea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 ff42 	bl	8005aa0 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 ff32 	bl	8005aa0 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c46:	d104      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 ff22 	bl	8005aa0 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c66:	d104      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 ff12 	bl	8005aa0 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d103      	bne.n	8001c8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 ff04 	bl	8005aa0 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca2:	d11c      	bne.n	8001cde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	6938      	ldr	r0, [r7, #16]
 8001cc2:	f003 fdf3 	bl	80058ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f003 fe24 	bl	8005914 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fffa 	bl	8005ccc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f006 fdc7 	bl	800886c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fedc 	bl	8005aa0 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf2:	d102      	bne.n	8001cfa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f001 f89e 	bl	8002e36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fece 	bl	8005aa0 <USB_ReadInterrupts>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d106      	bne.n	8001d1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f006 fd90 	bl	8008834 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 febd 	bl	8005aa0 <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x158>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_HCD_IRQHandler+0x15a>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0210 	bic.w	r2, r2, #16
 8001d48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 ffa1 	bl	8002c92 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0210 	orr.w	r2, r2, #16
 8001d5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fe9b 	bl	8005aa0 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d74:	d13a      	bne.n	8001dec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fad0 	bl	8006320 <USB_HC_ReadInterrupt>
 8001d80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e025      	b.n	8001dd4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d018      	beq.n	8001dce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db2:	d106      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8ab 	bl	8001f16 <HCD_HC_IN_IRQHandler>
 8001dc0:	e005      	b.n	8001dce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fbf9 	bl	80025c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3d4      	bcc.n	8001d88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	e000      	b.n	8001dec <HAL_HCD_IRQHandler+0x210>
      return;
 8001dea:	bf00      	nop
    }
  }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_HCD_Start+0x16>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e013      	b.n	8001e30 <HAL_HCD_Start+0x3e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 ffbc 	bl	8005d94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fcd4 	bl	80057ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_HCD_Stop+0x16>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00d      	b.n	8001e6a <HAL_HCD_Stop+0x32>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fbaa 	bl	80065b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 ff5e 	bl	8005d40 <USB_ResetPort>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	781b      	ldrb	r3, [r3, #0]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3350      	adds	r3, #80	; 0x50
 8001ed0:	681b      	ldr	r3, [r3, #0]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 ffa2 	bl	8005e34 <USB_GetCurrentFrame>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 ff7d 	bl	8005e06 <USB_GetHostSpeed>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d11a      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	2304      	movs	r3, #4
 8001f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	3361      	adds	r3, #97	; 0x61
 8001f66:	2206      	movs	r2, #6
 8001f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f9e4 	bl	8006342 <USB_HC_Halt>
 8001f7a:	e0af      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f92:	d11b      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3361      	adds	r3, #97	; 0x61
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 f9bc 	bl	8006342 <USB_HC_Halt>
 8001fca:	e087      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d109      	bne.n	8001ff6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	6093      	str	r3, [r2, #8]
 8001ff4:	e072      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d11a      	bne.n	8002042 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	461a      	mov	r2, r3
 800201a:	2308      	movs	r3, #8
 800201c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3361      	adds	r3, #97	; 0x61
 800202c:	2205      	movs	r2, #5
 800202e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f981 	bl	8006342 <USB_HC_Halt>
 8002040:	e04c      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002058:	d11b      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	461a      	mov	r2, r3
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3361      	adds	r3, #97	; 0x61
 800207c:	2208      	movs	r2, #8
 800207e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f004 f959 	bl	8006342 <USB_HC_Halt>
 8002090:	e024      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d119      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	461a      	mov	r2, r3
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3361      	adds	r3, #97	; 0x61
 80020c8:	2206      	movs	r2, #6
 80020ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 f933 	bl	8006342 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f2:	d112      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 f91f 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002118:	e24e      	b.n	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	f040 80df 	bne.w	80022f0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d019      	beq.n	800216e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3348      	adds	r3, #72	; 0x48
 8002148:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0159      	lsls	r1, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	440b      	add	r3, r1
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	202c      	movs	r0, #44	; 0x2c
 8002164:	fb00 f303 	mul.w	r3, r0, r3
 8002168:	440b      	add	r3, r1
 800216a:	3350      	adds	r3, #80	; 0x50
 800216c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3361      	adds	r3, #97	; 0x61
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	335c      	adds	r3, #92	; 0x5c
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	2301      	movs	r3, #1
 80021a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	333f      	adds	r3, #63	; 0x3f
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	333f      	adds	r3, #63	; 0x3f
 80021c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d111      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f8b3 	bl	8006342 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	461a      	mov	r2, r3
 80021ea:	2310      	movs	r3, #16
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e03a      	b.n	8002266 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	333f      	adds	r3, #63	; 0x3f
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d009      	beq.n	8002218 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002214:	2b01      	cmp	r3, #1
 8002216:	d126      	bne.n	8002266 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	0151      	lsls	r1, r2, #5
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	440a      	add	r2, r1
 800222e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002236:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3360      	adds	r3, #96	; 0x60
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	b2d9      	uxtb	r1, r3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	202c      	movs	r0, #44	; 0x2c
 8002254:	fb00 f303 	mul.w	r3, r0, r3
 8002258:	4413      	add	r3, r2
 800225a:	3360      	adds	r3, #96	; 0x60
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f006 fb11 	bl	8008888 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12b      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3348      	adds	r3, #72	; 0x48
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	fb00 f202 	mul.w	r2, r0, r2
 8002288:	440a      	add	r2, r1
 800228a:	3240      	adds	r2, #64	; 0x40
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 818e 	beq.w	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3354      	adds	r3, #84	; 0x54
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f083 0301 	eor.w	r3, r3, #1
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3354      	adds	r3, #84	; 0x54
 80022c0:	4602      	mov	r2, r0
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	e178      	b.n	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3354      	adds	r3, #84	; 0x54
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2d8      	uxtb	r0, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	3354      	adds	r3, #84	; 0x54
 80022ea:	4602      	mov	r2, r0
 80022ec:	701a      	strb	r2, [r3, #0]
}
 80022ee:	e163      	b.n	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	f040 80f6 	bne.w	80024f4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3361      	adds	r3, #97	; 0x61
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d109      	bne.n	8002330 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e0c9      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3361      	adds	r3, #97	; 0x61
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d109      	bne.n	8002358 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	2205      	movs	r2, #5
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e0b5      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3361      	adds	r3, #97	; 0x61
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d009      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3361      	adds	r3, #97	; 0x61
 800237a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800237c:	2b08      	cmp	r3, #8
 800237e:	d150      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f303 	mul.w	r3, r0, r3
 800239c:	440b      	add	r3, r1
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	335c      	adds	r3, #92	; 0x5c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d912      	bls.n	80023dc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	335c      	adds	r3, #92	; 0x5c
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3360      	adds	r3, #96	; 0x60
 80023d6:	2204      	movs	r2, #4
 80023d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023da:	e073      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002404:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800240c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002420:	e050      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3361      	adds	r3, #97	; 0x61
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d122      	bne.n	800247c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800245e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002466:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e023      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3361      	adds	r3, #97	; 0x61
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b07      	cmp	r3, #7
 800248e:	d119      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	335c      	adds	r3, #92	; 0x5c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	202c      	movs	r0, #44	; 0x2c
 80024a8:	fb00 f303 	mul.w	r3, r0, r3
 80024ac:	440b      	add	r3, r1
 80024ae:	335c      	adds	r3, #92	; 0x5c
 80024b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3360      	adds	r3, #96	; 0x60
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2302      	movs	r3, #2
 80024d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	b2d9      	uxtb	r1, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	202c      	movs	r0, #44	; 0x2c
 80024e0:	fb00 f303 	mul.w	r3, r0, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f006 f9cb 	bl	8008888 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024f2:	e061      	b.n	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d156      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	333f      	adds	r3, #63	; 0x3f
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d111      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f003 ff01 	bl	8006342 <USB_HC_Halt>
 8002540:	e031      	b.n	80025a6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	333f      	adds	r3, #63	; 0x3f
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333f      	adds	r3, #63	; 0x3f
 8002564:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002566:	2b02      	cmp	r3, #2
 8002568:	d11d      	bne.n	80025a6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d110      	bne.n	80025a6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3361      	adds	r3, #97	; 0x61
 8002592:	2203      	movs	r2, #3
 8002594:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fece 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	2310      	movs	r3, #16
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d11a      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2304      	movs	r3, #4
 8002600:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3361      	adds	r3, #97	; 0x61
 8002610:	2206      	movs	r2, #6
 8002612:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fe8f 	bl	8006342 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002624:	e331      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	d12e      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2320      	movs	r3, #32
 800264c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	333d      	adds	r3, #61	; 0x3d
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	f040 8313 	bne.w	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	333d      	adds	r3, #61	; 0x3d
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fe55 	bl	8006342 <USB_HC_Halt>
}
 8002698:	e2f7      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b0:	d112      	bne.n	80026d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fe36 	bl	8006342 <USB_HC_Halt>
}
 80026d6:	e2d8      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d140      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	335c      	adds	r3, #92	; 0x5c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d111      	bne.n	800273a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333d      	adds	r3, #61	; 0x3d
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2301      	movs	r3, #1
 800274a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3361      	adds	r3, #97	; 0x61
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fdea 	bl	8006342 <USB_HC_Halt>
}
 800276e:	e28c      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d12c      	bne.n	80027e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	333d      	adds	r3, #61	; 0x3d
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	335c      	adds	r3, #92	; 0x5c
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 fdbb 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	461a      	mov	r2, r3
 80027da:	2340      	movs	r3, #64	; 0x40
 80027dc:	6093      	str	r3, [r2, #8]
}
 80027de:	e254      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11a      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	2308      	movs	r3, #8
 8002806:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3361      	adds	r3, #97	; 0x61
 8002816:	2205      	movs	r2, #5
 8002818:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fd8c 	bl	8006342 <USB_HC_Halt>
}
 800282a:	e22e      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d140      	bne.n	80028c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	2203      	movs	r2, #3
 8002864:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	333d      	adds	r3, #61	; 0x3d
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d112      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	333c      	adds	r3, #60	; 0x3c
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	333d      	adds	r3, #61	; 0x3d
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fd49 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
}
 80028c2:	e1e2      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d164      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2206      	movs	r2, #6
 80028f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fd1f 	bl	8006342 <USB_HC_Halt>
 8002904:	e044      	b.n	8002990 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	202c      	movs	r0, #44	; 0x2c
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	440b      	add	r3, r1
 8002924:	335c      	adds	r3, #92	; 0x5c
 8002926:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	335c      	adds	r3, #92	; 0x5c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d920      	bls.n	800297e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	335c      	adds	r3, #92	; 0x5c
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	2204      	movs	r2, #4
 800295e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	b2d9      	uxtb	r1, r3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	202c      	movs	r0, #44	; 0x2c
 800296a:	fb00 f303 	mul.w	r3, r0, r3
 800296e:	4413      	add	r3, r2
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f005 ff86 	bl	8008888 <HAL_HCD_HC_NotifyURBChange_Callback>
 800297c:	e008      	b.n	8002990 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3360      	adds	r3, #96	; 0x60
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	6093      	str	r3, [r2, #8]
}
 80029a2:	e172      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d11b      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3361      	adds	r3, #97	; 0x61
 80029ca:	2208      	movs	r2, #8
 80029cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fcb2 	bl	8006342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	6093      	str	r3, [r2, #8]
}
 80029f2:	e14a      	b.n	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	f040 813f 	bne.w	8002c8a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d17d      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	333f      	adds	r3, #63	; 0x3f
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d00a      	beq.n	8002a5c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	333f      	adds	r3, #63	; 0x3f
 8002a54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	f040 8100 	bne.w	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d113      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3355      	adds	r3, #85	; 0x55
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	f083 0301 	eor.w	r3, r3, #1
 8002a78:	b2d8      	uxtb	r0, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3355      	adds	r3, #85	; 0x55
 8002a88:	4602      	mov	r2, r0
 8002a8a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 80e3 	bne.w	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	334c      	adds	r3, #76	; 0x4c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80d8 	beq.w	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	334c      	adds	r3, #76	; 0x4c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	202c      	movs	r0, #44	; 0x2c
 8002ac2:	fb00 f202 	mul.w	r2, r0, r2
 8002ac6:	440a      	add	r2, r1
 8002ac8:	3240      	adds	r2, #64	; 0x40
 8002aca:	8812      	ldrh	r2, [r2, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	202c      	movs	r0, #44	; 0x2c
 8002ad6:	fb00 f202 	mul.w	r2, r0, r2
 8002ada:	440a      	add	r2, r1
 8002adc:	3240      	adds	r2, #64	; 0x40
 8002ade:	8812      	ldrh	r2, [r2, #0]
 8002ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80b5 	beq.w	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3355      	adds	r3, #85	; 0x55
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f083 0301 	eor.w	r3, r3, #1
 8002b06:	b2d8      	uxtb	r0, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3355      	adds	r3, #85	; 0x55
 8002b16:	4602      	mov	r2, r0
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e09f      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d109      	bne.n	8002b44 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2202      	movs	r2, #2
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e08b      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3361      	adds	r3, #97	; 0x61
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d109      	bne.n	8002b6c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	2202      	movs	r2, #2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e077      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3361      	adds	r3, #97	; 0x61
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d109      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3360      	adds	r3, #96	; 0x60
 8002b8e:	2205      	movs	r2, #5
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e063      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3361      	adds	r3, #97	; 0x61
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d009      	beq.n	8002bbc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3361      	adds	r3, #97	; 0x61
 8002bb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d14f      	bne.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f303 	mul.w	r3, r0, r3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	335c      	adds	r3, #92	; 0x5c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d912      	bls.n	8002c18 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e021      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c48:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	b2d9      	uxtb	r1, r3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	202c      	movs	r0, #44	; 0x2c
 8002c78:	fb00 f303 	mul.w	r3, r0, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f005 fdff 	bl	8008888 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c8a:	bf00      	nop
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b08a      	sub	sp, #40	; 0x28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	0c5b      	lsrs	r3, r3, #17
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d004      	beq.n	8002cd8 <HCD_RXQLVL_IRQHandler+0x46>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	f000 80a9 	beq.w	8002e28 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cd6:	e0aa      	b.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a6 	beq.w	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3344      	adds	r3, #68	; 0x44
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 809b 	beq.w	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3350      	adds	r3, #80	; 0x50
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	441a      	add	r2, r3
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	202c      	movs	r0, #44	; 0x2c
 8002d10:	fb00 f303 	mul.w	r3, r0, r3
 8002d14:	440b      	add	r3, r1
 8002d16:	334c      	adds	r3, #76	; 0x4c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d87a      	bhi.n	8002e14 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3344      	adds	r3, #68	; 0x44
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	b292      	uxth	r2, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f002 fe5a 	bl	80059f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3344      	adds	r3, #68	; 0x44
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	441a      	add	r2, r3
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	202c      	movs	r0, #44	; 0x2c
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	; 0x44
 8002d5e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3350      	adds	r3, #80	; 0x50
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	441a      	add	r2, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	202c      	movs	r0, #44	; 0x2c
 8002d7a:	fb00 f303 	mul.w	r3, r0, r3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3350      	adds	r3, #80	; 0x50
 8002d82:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	0cdb      	lsrs	r3, r3, #19
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3340      	adds	r3, #64	; 0x40
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d13c      	bne.n	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d039      	beq.n	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3354      	adds	r3, #84	; 0x54
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3354      	adds	r3, #84	; 0x54
 8002e0e:	4602      	mov	r2, r0
 8002e10:	701a      	strb	r2, [r3, #0]
      break;
 8002e12:	e00b      	b.n	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3360      	adds	r3, #96	; 0x60
 8002e22:	2204      	movs	r2, #4
 8002e24:	701a      	strb	r2, [r3, #0]
      break;
 8002e26:	e001      	b.n	8002e2c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e2c:	bf00      	nop
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3728      	adds	r7, #40	; 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d10b      	bne.n	8002e86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d102      	bne.n	8002e7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 fce9 	bl	8008850 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d132      	bne.n	8002ef6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f043 0308 	orr.w	r3, r3, #8
 8002e96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d126      	bne.n	8002ef0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d113      	bne.n	8002ed2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eb4:	d106      	bne.n	8002ec4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 ff05 	bl	8005ccc <USB_InitFSLSPClkSel>
 8002ec2:	e011      	b.n	8002ee8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fefe 	bl	8005ccc <USB_InitFSLSPClkSel>
 8002ed0:	e00a      	b.n	8002ee8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d106      	bne.n	8002ee8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ee6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f005 fcdb 	bl	80088a4 <HAL_HCD_PortEnabled_Callback>
 8002eee:	e002      	b.n	8002ef6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f005 fce5 	bl	80088c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d103      	bne.n	8002f08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e12b      	b.n	8003186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fda4 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f80:	f001 fa20 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8002f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a81      	ldr	r2, [pc, #516]	; (8003190 <HAL_I2C_Init+0x274>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d807      	bhi.n	8002fa0 <HAL_I2C_Init+0x84>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a80      	ldr	r2, [pc, #512]	; (8003194 <HAL_I2C_Init+0x278>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e006      	b.n	8002fae <HAL_I2C_Init+0x92>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a7d      	ldr	r2, [pc, #500]	; (8003198 <HAL_I2C_Init+0x27c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0e7      	b.n	8003186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a78      	ldr	r2, [pc, #480]	; (800319c <HAL_I2C_Init+0x280>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9b      	lsrs	r3, r3, #18
 8002fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	; (8003190 <HAL_I2C_Init+0x274>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_I2C_Init+0xd4>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3301      	adds	r3, #1
 8002fee:	e009      	b.n	8003004 <HAL_I2C_Init+0xe8>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_I2C_Init+0x284>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	3301      	adds	r3, #1
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	495c      	ldr	r1, [pc, #368]	; (8003190 <HAL_I2C_Init+0x274>)
 8003020:	428b      	cmp	r3, r1
 8003022:	d819      	bhi.n	8003058 <HAL_I2C_Init+0x13c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e59      	subs	r1, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003032:	1c59      	adds	r1, r3, #1
 8003034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003038:	400b      	ands	r3, r1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_I2C_Init+0x138>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e59      	subs	r1, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fbb1 f3f3 	udiv	r3, r1, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003052:	e051      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 8003054:	2304      	movs	r3, #4
 8003056:	e04f      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d111      	bne.n	8003084 <HAL_I2C_Init+0x168>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e012      	b.n	80030aa <HAL_I2C_Init+0x18e>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Init+0x196>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e022      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10e      	bne.n	80030d8 <HAL_I2C_Init+0x1bc>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e58      	subs	r0, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	440b      	add	r3, r1
 80030c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	e00f      	b.n	80030f8 <HAL_I2C_Init+0x1dc>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	0099      	lsls	r1, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6809      	ldr	r1, [r1, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6911      	ldr	r1, [r2, #16]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	000186a0 	.word	0x000186a0
 8003194:	001e847f 	.word	0x001e847f
 8003198:	003d08ff 	.word	0x003d08ff
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	10624dd3 	.word	0x10624dd3

080031a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e128      	b.n	8003408 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a90      	ldr	r2, [pc, #576]	; (8003410 <HAL_I2S_Init+0x26c>)
 80031ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fd fca5 	bl	8000b20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2202      	movs	r2, #2
 80031f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d060      	beq.n	80032c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800320a:	2310      	movs	r3, #16
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e001      	b.n	8003214 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b20      	cmp	r3, #32
 800321a:	d802      	bhi.n	8003222 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003222:	2001      	movs	r0, #1
 8003224:	f001 f9d8 	bl	80045d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003228:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003232:	d125      	bne.n	8003280 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	fbb2 f2f3 	udiv	r2, r2, r3
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	3305      	adds	r3, #5
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e01f      	b.n	800329e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	3305      	adds	r3, #5
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	e00e      	b.n	800329e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	461a      	mov	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	3305      	adds	r3, #5
 800329c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4a5c      	ldr	r2, [pc, #368]	; (8003414 <HAL_I2S_Init+0x270>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	08db      	lsrs	r3, r3, #3
 80032a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032c4:	2302      	movs	r3, #2
 80032c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d902      	bls.n	80032d8 <HAL_I2S_Init+0x134>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2bff      	cmp	r3, #255	; 0xff
 80032d6:	d907      	bls.n	80032e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0210 	orr.w	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e08f      	b.n	8003408 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003306:	f023 030f 	bic.w	r3, r3, #15
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6851      	ldr	r1, [r2, #4]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68d2      	ldr	r2, [r2, #12]
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6992      	ldr	r2, [r2, #24]
 800331e:	430a      	orrs	r2, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d161      	bne.n	80033f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a38      	ldr	r2, [pc, #224]	; (8003418 <HAL_I2S_Init+0x274>)
 8003338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <HAL_I2S_Init+0x278>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_I2S_Init+0x1a4>
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_I2S_Init+0x27c>)
 8003346:	e001      	b.n	800334c <HAL_I2S_Init+0x1a8>
 8003348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4932      	ldr	r1, [pc, #200]	; (800341c <HAL_I2S_Init+0x278>)
 8003354:	428a      	cmp	r2, r1
 8003356:	d101      	bne.n	800335c <HAL_I2S_Init+0x1b8>
 8003358:	4a31      	ldr	r2, [pc, #196]	; (8003420 <HAL_I2S_Init+0x27c>)
 800335a:	e001      	b.n	8003360 <HAL_I2S_Init+0x1bc>
 800335c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003360:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2b      	ldr	r2, [pc, #172]	; (800341c <HAL_I2S_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_I2S_Init+0x1d4>
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_I2S_Init+0x27c>)
 8003376:	e001      	b.n	800337c <HAL_I2S_Init+0x1d8>
 8003378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337c:	2202      	movs	r2, #2
 800337e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <HAL_I2S_Init+0x278>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_I2S_Init+0x1ea>
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_I2S_Init+0x27c>)
 800338c:	e001      	b.n	8003392 <HAL_I2S_Init+0x1ee>
 800338e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d003      	beq.n	80033a8 <HAL_I2S_Init+0x204>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d103      	bne.n	80033b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e001      	b.n	80033b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033be:	4313      	orrs	r3, r2
 80033c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	4313      	orrs	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_I2S_Init+0x278>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_I2S_Init+0x24c>
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_I2S_Init+0x27c>)
 80033ee:	e001      	b.n	80033f4 <HAL_I2S_Init+0x250>
 80033f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f4:	897a      	ldrh	r2, [r7, #10]
 80033f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	0800351b 	.word	0x0800351b
 8003414:	cccccccd 	.word	0xcccccccd
 8003418:	08003631 	.word	0x08003631
 800341c:	40003800 	.word	0x40003800
 8003420:	40003400 	.word	0x40003400

08003424 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffb8 	bl	8003424 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	b292      	uxth	r2, r2
 80034d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003502:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff93 	bl	8003438 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b04      	cmp	r3, #4
 8003534:	d13a      	bne.n	80035ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d109      	bne.n	8003554 <I2S_IRQHandler+0x3a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d102      	bne.n	8003554 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffb4 	bl	80034bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d126      	bne.n	80035ac <I2S_IRQHandler+0x92>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d11f      	bne.n	80035ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f043 0202 	orr.w	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff50 	bl	800344c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d136      	bne.n	8003626 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d109      	bne.n	80035d6 <I2S_IRQHandler+0xbc>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff45 	bl	8003460 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d122      	bne.n	8003626 <I2S_IRQHandler+0x10c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d11b      	bne.n	8003626 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff13 	bl	800344c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a92      	ldr	r2, [pc, #584]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800364a:	4b92      	ldr	r3, [pc, #584]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800364c:	e001      	b.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800364e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8b      	ldr	r2, [pc, #556]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003668:	4b8a      	ldr	r3, [pc, #552]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800366a:	e001      	b.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800366c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d004      	beq.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 8099 	bne.w	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d107      	bne.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f925 	bl	80038ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f9c8 	bl	8003a4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d13a      	bne.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d035      	beq.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036da:	4b6e      	ldr	r3, [pc, #440]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4969      	ldr	r1, [pc, #420]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036ee:	4b69      	ldr	r3, [pc, #420]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f0:	e001      	b.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800370a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0202 	orr.w	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fe88 	bl	800344c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b08      	cmp	r3, #8
 8003744:	f040 80c3 	bne.w	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80bd 	beq.w	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003762:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a49      	ldr	r2, [pc, #292]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003770:	e001      	b.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4944      	ldr	r1, [pc, #272]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377e:	428b      	cmp	r3, r1
 8003780:	d101      	bne.n	8003786 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003782:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003784:	e001      	b.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800378e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe4a 	bl	800344c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b8:	e089      	b.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8be 	bl	8003950 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8fd 	bl	80039e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d12f      	bne.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02a      	beq.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003810:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381e:	e001      	b.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4919      	ldr	r1, [pc, #100]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800382c:	428b      	cmp	r3, r1
 800382e:	d101      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003832:	e001      	b.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003838:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fdfa 	bl	800344c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	d136      	bne.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d031      	beq.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003878:	e001      	b.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800387a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4902      	ldr	r1, [pc, #8]	; (8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003886:	428b      	cmp	r3, r1
 8003888:	d106      	bne.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800388a:	4b02      	ldr	r3, [pc, #8]	; (8003894 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388c:	e006      	b.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800388e:	bf00      	nop
 8003890:	40003800 	.word	0x40003800
 8003894:	40003400 	.word	0x40003400
 8003898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fdc0 	bl	800344c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038cc:	e000      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ce:	bf00      	nop
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c99      	adds	r1, r3, #2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6251      	str	r1, [r2, #36]	; 0x24
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffc9 	bl	80038d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	1c99      	adds	r1, r3, #2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6251      	str	r1, [r2, #36]	; 0x24
 8003962:	8819      	ldrh	r1, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <I2SEx_TxISR_I2SExt+0x90>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <I2SEx_TxISR_I2SExt+0x22>
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <I2SEx_TxISR_I2SExt+0x94>)
 8003970:	e001      	b.n	8003976 <I2SEx_TxISR_I2SExt+0x26>
 8003972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003976:	460a      	mov	r2, r1
 8003978:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <I2SEx_TxISR_I2SExt+0x90>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <I2SEx_TxISR_I2SExt+0x50>
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <I2SEx_TxISR_I2SExt+0x94>)
 800399e:	e001      	b.n	80039a4 <I2SEx_TxISR_I2SExt+0x54>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <I2SEx_TxISR_I2SExt+0x90>)
 80039ac:	428b      	cmp	r3, r1
 80039ae:	d101      	bne.n	80039b4 <I2SEx_TxISR_I2SExt+0x64>
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <I2SEx_TxISR_I2SExt+0x94>)
 80039b2:	e001      	b.n	80039b8 <I2SEx_TxISR_I2SExt+0x68>
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff81 	bl	80038d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40003800 	.word	0x40003800
 80039e4:	40003400 	.word	0x40003400

080039e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68d8      	ldr	r0, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	1c99      	adds	r1, r3, #2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a00:	b282      	uxth	r2, r0
 8003a02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d113      	bne.n	8003a44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff4a 	bl	80038d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <I2SEx_RxISR_I2SExt+0x90>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <I2SEx_RxISR_I2SExt+0x16>
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a60:	e001      	b.n	8003a66 <I2SEx_RxISR_I2SExt+0x1a>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	68d8      	ldr	r0, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	1c99      	adds	r1, r3, #2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a72:	b282      	uxth	r2, r0
 8003a74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d121      	bne.n	8003ad2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <I2SEx_RxISR_I2SExt+0x90>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <I2SEx_RxISR_I2SExt+0x50>
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x94>)
 8003a9a:	e001      	b.n	8003aa0 <I2SEx_RxISR_I2SExt+0x54>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	490d      	ldr	r1, [pc, #52]	; (8003adc <I2SEx_RxISR_I2SExt+0x90>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d101      	bne.n	8003ab0 <I2SEx_RxISR_I2SExt+0x64>
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x94>)
 8003aae:	e001      	b.n	8003ab4 <I2SEx_RxISR_I2SExt+0x68>
 8003ab0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff03 	bl	80038d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40003400 	.word	0x40003400

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e267      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d075      	beq.n	8003bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d00c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d112      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05b      	beq.n	8003bec <HAL_RCC_OscConfig+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d157      	bne.n	8003bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e242      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x74>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e01d      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6f      	ldr	r2, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6c      	ldr	r2, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fa10 	bl	8000fc0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fd fa0c 	bl	8000fc0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e207      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd f9fc 	bl	8000fc0 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fd f9f8 	bl	8000fc0 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1f3      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0xe8>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d063      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d11c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1c7      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4937      	ldr	r1, [pc, #220]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	e03a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd f9b1 	bl	8000fc0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fd f9ad 	bl	8000fc0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1a8      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4925      	ldr	r1, [pc, #148]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	e015      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd f990 	bl	8000fc0 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd f98c 	bl	8000fc0 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e187      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d036      	beq.n	8003d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd f970 	bl	8000fc0 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fd f96c 	bl	8000fc0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e167      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x200>
 8003d02:	e01b      	b.n	8003d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd f959 	bl	8000fc0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	e00e      	b.n	8003d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd f955 	bl	8000fc0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d907      	bls.n	8003d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e150      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470000 	.word	0x42470000
 8003d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b88      	ldr	r3, [pc, #544]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ea      	bne.n	8003d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8097 	beq.w	8003e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a7c      	ldr	r2, [pc, #496]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b77      	ldr	r3, [pc, #476]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd f915 	bl	8000fc0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd f911 	bl	8000fc0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x2ea>
 8003dc0:	4b64      	ldr	r3, [pc, #400]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a63      	ldr	r2, [pc, #396]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x30c>
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003df0:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfc:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a54      	ldr	r2, [pc, #336]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd f8d6 	bl	8000fc0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fd f8d2 	bl	8000fc0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0cb      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ee      	beq.n	8003e18 <HAL_RCC_OscConfig+0x334>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fd f8c0 	bl	8000fc0 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd f8bc 	bl	8000fc0 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b5      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ee      	bne.n	8003e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a1 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d05c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d141      	bne.n	8003f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd f890 	bl	8000fc0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd f88c 	bl	8000fc0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e087      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	491b      	ldr	r1, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd f865 	bl	8000fc0 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd f861 	bl	8000fc0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e05c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x416>
 8003f18:	e054      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd f84e 	bl	8000fc0 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd f84a 	bl	8000fc0 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e045      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x444>
 8003f46:	e03d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e038      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x4ec>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d028      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d121      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cc      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d90c      	bls.n	8004010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0b8      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800404a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d044      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d119      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d003      	beq.n	8004092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408e:	2b03      	cmp	r3, #3
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e06f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e067      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fc ff7c 	bl	8000fc0 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fc ff78 	bl	8000fc0 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e04f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20c      	bcs.n	800411c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e032      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4916      	ldr	r1, [pc, #88]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	490e      	ldr	r1, [pc, #56]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415a:	f000 f821 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800415e:	4602      	mov	r2, r0
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	490a      	ldr	r1, [pc, #40]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	5ccb      	ldrb	r3, [r1, r3]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc fedc 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00
 8004190:	40023800 	.word	0x40023800
 8004194:	08008f88 	.word	0x08008f88
 8004198:	20000010 	.word	0x20000010
 800419c:	20000014 	.word	0x20000014

080041a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b094      	sub	sp, #80	; 0x50
 80041a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	647b      	str	r3, [r7, #68]	; 0x44
 80041ac:	2300      	movs	r3, #0
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	2300      	movs	r3, #0
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b8:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d00d      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x40>
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	f200 80e1 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d003      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0x3a>
 80041d2:	e0db      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041d8:	e0db      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041da:	4b73      	ldr	r3, [pc, #460]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041de:	e0d8      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e0:	4b6f      	ldr	r3, [pc, #444]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d063      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	2200      	movs	r2, #0
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4621      	mov	r1, r4
 800422c:	1a51      	subs	r1, r2, r1
 800422e:	6139      	str	r1, [r7, #16]
 8004230:	4629      	mov	r1, r5
 8004232:	eb63 0301 	sbc.w	r3, r3, r1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004244:	4659      	mov	r1, fp
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	4651      	mov	r1, sl
 800424a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424e:	4651      	mov	r1, sl
 8004250:	018a      	lsls	r2, r1, #6
 8004252:	4651      	mov	r1, sl
 8004254:	ebb2 0801 	subs.w	r8, r2, r1
 8004258:	4659      	mov	r1, fp
 800425a:	eb63 0901 	sbc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	462b      	mov	r3, r5
 8004280:	eb49 0303 	adc.w	r3, r9, r3
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004292:	4629      	mov	r1, r5
 8004294:	024b      	lsls	r3, r1, #9
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800429c:	4621      	mov	r1, r4
 800429e:	024a      	lsls	r2, r1, #9
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b0:	f7fb ff8a 	bl	80001c8 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042bc:	e058      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	2200      	movs	r2, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	4611      	mov	r1, r2
 80042ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	f04f 0000 	mov.w	r0, #0
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	0159      	lsls	r1, r3, #5
 80042e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ea:	0150      	lsls	r0, r2, #5
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4641      	mov	r1, r8
 80042f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800430c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004310:	ebb2 040a 	subs.w	r4, r2, sl
 8004314:	eb63 050b 	sbc.w	r5, r3, fp
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	464b      	mov	r3, r9
 8004334:	eb45 0303 	adc.w	r3, r5, r3
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004346:	4629      	mov	r1, r5
 8004348:	028b      	lsls	r3, r1, #10
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004350:	4621      	mov	r1, r4
 8004352:	028a      	lsls	r2, r1, #10
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	61fa      	str	r2, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	f7fb ff30 	bl	80001c8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438a:	e002      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004394:	4618      	mov	r0, r3
 8004396:	3750      	adds	r7, #80	; 0x50
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000010 	.word	0x20000010

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a9b      	lsrs	r3, r3, #10
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08008f98 	.word	0x08008f98

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043f0:	f7ff ffdc 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_GetPCLK2Freq+0x20>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0b5b      	lsrs	r3, r3, #13
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4903      	ldr	r1, [pc, #12]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	08008f98 	.word	0x08008f98

08004414 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004438:	2b00      	cmp	r3, #0
 800443a:	d035      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004442:	f7fc fdbd 	bl	8000fc0 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004448:	e008      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800444a:	f7fc fdb9 	bl	8000fc0 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e0b0      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800445c:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	019a      	lsls	r2, r3, #6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	071b      	lsls	r3, r3, #28
 8004474:	4955      	ldr	r1, [pc, #340]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800447c:	4b52      	ldr	r3, [pc, #328]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004482:	f7fc fd9d 	bl	8000fc0 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800448a:	f7fc fd99 	bl	8000fc0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e090      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8083 	beq.w	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b44      	ldr	r3, [pc, #272]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a43      	ldr	r2, [pc, #268]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044de:	f7fc fd6f 	bl	8000fc0 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fc fd6b 	bl	8000fc0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e062      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004504:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02f      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d028      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004532:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d114      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800454a:	f7fc fd39 	bl	8000fc0 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fc fd35 	bl	8000fc0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e02a      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ee      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004580:	d10d      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004596:	490d      	ldr	r1, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]
 800459c:	e005      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045a8:	6093      	str	r3, [r2, #8]
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b6:	4905      	ldr	r1, [pc, #20]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	42470068 	.word	0x42470068
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42470e40 	.word	0x42470e40

080045d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d13e      	bne.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d12f      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800460c:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800460e:	617b      	str	r3, [r7, #20]
          break;
 8004610:	e02f      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461e:	d108      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004620:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e007      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800463a:	4a15      	ldr	r2, [pc, #84]	; (8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465c:	0f1b      	lsrs	r3, r3, #28
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
          break;
 800466a:	e002      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
          break;
 8004670:	bf00      	nop
        }
      }
      break;
 8004672:	bf00      	nop
    }
  }
  return frequency;
 8004674:	697b      	ldr	r3, [r7, #20]
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	00bb8000 	.word	0x00bb8000
 800468c:	007a1200 	.word	0x007a1200
 8004690:	00f42400 	.word	0x00f42400

08004694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07b      	b.n	800479e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b6:	d009      	beq.n	80046cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	61da      	str	r2, [r3, #28]
 80046be:	e005      	b.n	80046cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc fa9a 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	ea42 0103 	orr.w	r1, r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	f003 0104 	and.w	r1, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f003 0210 	and.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e03f      	b.n	8004838 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fc fa6f 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2224      	movs	r2, #36	; 0x24
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fd1a 	bl	8005224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	d130      	bne.n	80048bc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UART_Transmit_IT+0x26>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e029      	b.n	80048be <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UART_Transmit_IT+0x38>
 8004874:	2302      	movs	r3, #2
 8004876:	e022      	b.n	80048be <HAL_UART_Transmit_IT+0x7e>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d11d      	bne.n	8004920 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Receive_IT+0x26>
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e016      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Receive_IT+0x38>
 80048fe:	2302      	movs	r3, #2
 8004900:	e00f      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	461a      	mov	r2, r3
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 faac 	bl	8004e74 <UART_Start_Receive_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	e000      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b0ba      	sub	sp, #232	; 0xe8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800496a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_UART_IRQHandler+0x66>
 800497e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fb8f 	bl	80050ae <UART_Receive_IT>
      return;
 8004990:	e256      	b.n	8004e40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80de 	beq.w	8004b58 <HAL_UART_IRQHandler+0x22c>
 800499c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80d1 	beq.w	8004b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_UART_IRQHandler+0xae>
 80049c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_UART_IRQHandler+0xd2>
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f043 0202 	orr.w	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_UART_IRQHandler+0xf6>
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d011      	beq.n	8004a52 <HAL_UART_IRQHandler+0x126>
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0208 	orr.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 81ed 	beq.w	8004e36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_UART_IRQHandler+0x14e>
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fb1a 	bl	80050ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x17a>
 8004a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d04f      	beq.n	8004b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa22 	bl	8004ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d141      	bne.n	8004b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1d9      	bne.n	8004aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d013      	beq.n	8004b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	4a7d      	ldr	r2, [pc, #500]	; (8004d08 <HAL_UART_IRQHandler+0x3dc>)
 8004b14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fc01 	bl	8001322 <HAL_DMA_Abort_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d016      	beq.n	8004b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e00e      	b.n	8004b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f986 	bl	8004e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	e00a      	b.n	8004b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f982 	bl	8004e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	e006      	b.n	8004b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f97e 	bl	8004e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b52:	e170      	b.n	8004e36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	bf00      	nop
    return;
 8004b56:	e16e      	b.n	8004e36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	f040 814a 	bne.w	8004df6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8143 	beq.w	8004df6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 813c 	beq.w	8004df6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	f040 80b4 	bne.w	8004d0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8140 	beq.w	8004e3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	f080 8139 	bcs.w	8004e3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	f000 8088 	beq.w	8004cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1d9      	bne.n	8004bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e1      	bne.n	8004c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e3      	bne.n	8004cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fc faaa 	bl	8001242 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8ac 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d04:	e099      	b.n	8004e3a <HAL_UART_IRQHandler+0x50e>
 8004d06:	bf00      	nop
 8004d08:	08004fb7 	.word	0x08004fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 808b 	beq.w	8004e3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8086 	beq.w	8004e3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d56:	647a      	str	r2, [r7, #68]	; 0x44
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e3      	bne.n	8004d32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0310 	bic.w	r3, r3, #16
 8004dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004dd4:	61fa      	str	r2, [r7, #28]
 8004dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	617b      	str	r3, [r7, #20]
   return(result);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e3      	bne.n	8004db0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f834 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004df4:	e023      	b.n	8004e3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_UART_IRQHandler+0x4ea>
 8004e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8e5 	bl	8004fde <UART_Transmit_IT>
    return;
 8004e14:	e014      	b.n	8004e40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00e      	beq.n	8004e40 <HAL_UART_IRQHandler+0x514>
 8004e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f925 	bl	800507e <UART_EndTransmit_IT>
    return;
 8004e34:	e004      	b.n	8004e40 <HAL_UART_IRQHandler+0x514>
    return;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <HAL_UART_IRQHandler+0x514>
      return;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_UART_IRQHandler+0x514>
      return;
 8004e3e:	bf00      	nop
  }
}
 8004e40:	37e8      	adds	r7, #232	; 0xe8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2222      	movs	r2, #34	; 0x22
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0220 	orr.w	r2, r2, #32
 8004ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b095      	sub	sp, #84	; 0x54
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f18:	643a      	str	r2, [r7, #64]	; 0x40
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d119      	bne.n	8004f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f023 0310 	bic.w	r3, r3, #16
 8004f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f88:	61ba      	str	r2, [r7, #24]
 8004f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	613b      	str	r3, [r7, #16]
   return(result);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004faa:	bf00      	nop
 8004fac:	3754      	adds	r7, #84	; 0x54
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff39 	bl	8004e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b21      	cmp	r3, #33	; 0x21
 8004ff0:	d13e      	bne.n	8005070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d114      	bne.n	8005026 <UART_Transmit_IT+0x48>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d110      	bne.n	8005026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]
 8005024:	e008      	b.n	8005038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6211      	str	r1, [r2, #32]
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4619      	mov	r1, r3
 8005046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fb fa4a 	bl	8000538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08c      	sub	sp, #48	; 0x30
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b22      	cmp	r3, #34	; 0x22
 80050c0:	f040 80ab 	bne.w	800521a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d117      	bne.n	80050fe <UART_Receive_IT+0x50>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d113      	bne.n	80050fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	1c9a      	adds	r2, r3, #2
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
 80050fc:	e026      	b.n	800514c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005110:	d007      	beq.n	8005122 <UART_Receive_IT+0x74>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <UART_Receive_IT+0x82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e008      	b.n	8005142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4619      	mov	r1, r3
 800515a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800515c:	2b00      	cmp	r3, #0
 800515e:	d15a      	bne.n	8005216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0220 	bic.w	r2, r2, #32
 800516e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	d135      	bne.n	800520c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 0310 	bic.w	r3, r3, #16
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c6:	623a      	str	r2, [r7, #32]
 80051c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	69f9      	ldr	r1, [r7, #28]
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e5      	bne.n	80051a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d10a      	bne.n	80051fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fe29 	bl	8004e5c <HAL_UARTEx_RxEventCallback>
 800520a:	e002      	b.n	8005212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fb f95d 	bl	80004cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e002      	b.n	800521c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3730      	adds	r7, #48	; 0x30
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b0c0      	sub	sp, #256	; 0x100
 800522a:	af00      	add	r7, sp, #0
 800522c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	ea40 0301 	orr.w	r3, r0, r1
 800524c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800527c:	f021 010c 	bic.w	r1, r1, #12
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800528a:	430b      	orrs	r3, r1
 800528c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	6999      	ldr	r1, [r3, #24]
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	ea40 0301 	orr.w	r3, r0, r1
 80052aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <UART_SetConfig+0x2cc>)
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d005      	beq.n	80052c4 <UART_SetConfig+0xa0>
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b8d      	ldr	r3, [pc, #564]	; (80054f4 <UART_SetConfig+0x2d0>)
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d104      	bne.n	80052ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7ff f892 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 80052c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052cc:	e003      	b.n	80052d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7ff f879 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80052d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	f040 810c 	bne.w	80054fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052fe:	415b      	adcs	r3, r3
 8005300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005306:	4621      	mov	r1, r4
 8005308:	eb12 0801 	adds.w	r8, r2, r1
 800530c:	4629      	mov	r1, r5
 800530e:	eb43 0901 	adc.w	r9, r3, r1
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005326:	4690      	mov	r8, r2
 8005328:	4699      	mov	r9, r3
 800532a:	4623      	mov	r3, r4
 800532c:	eb18 0303 	adds.w	r3, r8, r3
 8005330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005334:	462b      	mov	r3, r5
 8005336:	eb49 0303 	adc.w	r3, r9, r3
 800533a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800534a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800534e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005352:	460b      	mov	r3, r1
 8005354:	18db      	adds	r3, r3, r3
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
 8005358:	4613      	mov	r3, r2
 800535a:	eb42 0303 	adc.w	r3, r2, r3
 800535e:	657b      	str	r3, [r7, #84]	; 0x54
 8005360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005368:	f7fa ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4b61      	ldr	r3, [pc, #388]	; (80054f8 <UART_SetConfig+0x2d4>)
 8005372:	fba3 2302 	umull	r2, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	011c      	lsls	r4, r3, #4
 800537a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800538c:	4642      	mov	r2, r8
 800538e:	464b      	mov	r3, r9
 8005390:	1891      	adds	r1, r2, r2
 8005392:	64b9      	str	r1, [r7, #72]	; 0x48
 8005394:	415b      	adcs	r3, r3
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800539c:	4641      	mov	r1, r8
 800539e:	eb12 0a01 	adds.w	sl, r2, r1
 80053a2:	4649      	mov	r1, r9
 80053a4:	eb43 0b01 	adc.w	fp, r3, r1
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053bc:	4692      	mov	sl, r2
 80053be:	469b      	mov	fp, r3
 80053c0:	4643      	mov	r3, r8
 80053c2:	eb1a 0303 	adds.w	r3, sl, r3
 80053c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ca:	464b      	mov	r3, r9
 80053cc:	eb4b 0303 	adc.w	r3, fp, r3
 80053d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053e8:	460b      	mov	r3, r1
 80053ea:	18db      	adds	r3, r3, r3
 80053ec:	643b      	str	r3, [r7, #64]	; 0x40
 80053ee:	4613      	mov	r3, r2
 80053f0:	eb42 0303 	adc.w	r3, r2, r3
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
 80053f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053fe:	f7fa fee3 	bl	80001c8 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4611      	mov	r1, r2
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <UART_SetConfig+0x2d4>)
 800540a:	fba3 2301 	umull	r2, r3, r3, r1
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2264      	movs	r2, #100	; 0x64
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	1acb      	subs	r3, r1, r3
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <UART_SetConfig+0x2d4>)
 8005420:	fba3 2302 	umull	r2, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800542c:	441c      	add	r4, r3
 800542e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800543c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	1891      	adds	r1, r2, r2
 8005446:	63b9      	str	r1, [r7, #56]	; 0x38
 8005448:	415b      	adcs	r3, r3
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005450:	4641      	mov	r1, r8
 8005452:	1851      	adds	r1, r2, r1
 8005454:	6339      	str	r1, [r7, #48]	; 0x30
 8005456:	4649      	mov	r1, r9
 8005458:	414b      	adcs	r3, r1
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005468:	4659      	mov	r1, fp
 800546a:	00cb      	lsls	r3, r1, #3
 800546c:	4651      	mov	r1, sl
 800546e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005472:	4651      	mov	r1, sl
 8005474:	00ca      	lsls	r2, r1, #3
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	4603      	mov	r3, r0
 800547c:	4642      	mov	r2, r8
 800547e:	189b      	adds	r3, r3, r2
 8005480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005484:	464b      	mov	r3, r9
 8005486:	460a      	mov	r2, r1
 8005488:	eb42 0303 	adc.w	r3, r2, r3
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800549c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a4:	460b      	mov	r3, r1
 80054a6:	18db      	adds	r3, r3, r3
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054aa:	4613      	mov	r3, r2
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ba:	f7fa fe85 	bl	80001c8 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <UART_SetConfig+0x2d4>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <UART_SetConfig+0x2d4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4422      	add	r2, r4
 80054ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ec:	e105      	b.n	80056fa <UART_SetConfig+0x4d6>
 80054ee:	bf00      	nop
 80054f0:	40011000 	.word	0x40011000
 80054f4:	40011400 	.word	0x40011400
 80054f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005500:	2200      	movs	r2, #0
 8005502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800550a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800550e:	4642      	mov	r2, r8
 8005510:	464b      	mov	r3, r9
 8005512:	1891      	adds	r1, r2, r2
 8005514:	6239      	str	r1, [r7, #32]
 8005516:	415b      	adcs	r3, r3
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800551e:	4641      	mov	r1, r8
 8005520:	1854      	adds	r4, r2, r1
 8005522:	4649      	mov	r1, r9
 8005524:	eb43 0501 	adc.w	r5, r3, r1
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	00eb      	lsls	r3, r5, #3
 8005532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005536:	00e2      	lsls	r2, r4, #3
 8005538:	4614      	mov	r4, r2
 800553a:	461d      	mov	r5, r3
 800553c:	4643      	mov	r3, r8
 800553e:	18e3      	adds	r3, r4, r3
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005544:	464b      	mov	r3, r9
 8005546:	eb45 0303 	adc.w	r3, r5, r3
 800554a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800555a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800556a:	4629      	mov	r1, r5
 800556c:	008b      	lsls	r3, r1, #2
 800556e:	4621      	mov	r1, r4
 8005570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005574:	4621      	mov	r1, r4
 8005576:	008a      	lsls	r2, r1, #2
 8005578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800557c:	f7fa fe24 	bl	80001c8 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4b60      	ldr	r3, [pc, #384]	; (8005708 <UART_SetConfig+0x4e4>)
 8005586:	fba3 2302 	umull	r2, r3, r3, r2
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	011c      	lsls	r4, r3, #4
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800559c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	1891      	adds	r1, r2, r2
 80055a6:	61b9      	str	r1, [r7, #24]
 80055a8:	415b      	adcs	r3, r3
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b0:	4641      	mov	r1, r8
 80055b2:	1851      	adds	r1, r2, r1
 80055b4:	6139      	str	r1, [r7, #16]
 80055b6:	4649      	mov	r1, r9
 80055b8:	414b      	adcs	r3, r1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c8:	4659      	mov	r1, fp
 80055ca:	00cb      	lsls	r3, r1, #3
 80055cc:	4651      	mov	r1, sl
 80055ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d2:	4651      	mov	r1, sl
 80055d4:	00ca      	lsls	r2, r1, #3
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	4642      	mov	r2, r8
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e4:	464b      	mov	r3, r9
 80055e6:	460a      	mov	r2, r1
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005608:	4649      	mov	r1, r9
 800560a:	008b      	lsls	r3, r1, #2
 800560c:	4641      	mov	r1, r8
 800560e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005612:	4641      	mov	r1, r8
 8005614:	008a      	lsls	r2, r1, #2
 8005616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800561a:	f7fa fdd5 	bl	80001c8 <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4b39      	ldr	r3, [pc, #228]	; (8005708 <UART_SetConfig+0x4e4>)
 8005624:	fba3 1302 	umull	r1, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2164      	movs	r1, #100	; 0x64
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a34      	ldr	r2, [pc, #208]	; (8005708 <UART_SetConfig+0x4e4>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005642:	441c      	add	r4, r3
 8005644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005648:	2200      	movs	r2, #0
 800564a:	673b      	str	r3, [r7, #112]	; 0x70
 800564c:	677a      	str	r2, [r7, #116]	; 0x74
 800564e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005652:	4642      	mov	r2, r8
 8005654:	464b      	mov	r3, r9
 8005656:	1891      	adds	r1, r2, r2
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	415b      	adcs	r3, r3
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005662:	4641      	mov	r1, r8
 8005664:	1851      	adds	r1, r2, r1
 8005666:	6039      	str	r1, [r7, #0]
 8005668:	4649      	mov	r1, r9
 800566a:	414b      	adcs	r3, r1
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800567a:	4659      	mov	r1, fp
 800567c:	00cb      	lsls	r3, r1, #3
 800567e:	4651      	mov	r1, sl
 8005680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005684:	4651      	mov	r1, sl
 8005686:	00ca      	lsls	r2, r1, #3
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	4603      	mov	r3, r0
 800568e:	4642      	mov	r2, r8
 8005690:	189b      	adds	r3, r3, r2
 8005692:	66bb      	str	r3, [r7, #104]	; 0x68
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	663b      	str	r3, [r7, #96]	; 0x60
 80056a8:	667a      	str	r2, [r7, #100]	; 0x64
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056b6:	4649      	mov	r1, r9
 80056b8:	008b      	lsls	r3, r1, #2
 80056ba:	4641      	mov	r1, r8
 80056bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c0:	4641      	mov	r1, r8
 80056c2:	008a      	lsls	r2, r1, #2
 80056c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056c8:	f7fa fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <UART_SetConfig+0x4e4>)
 80056d2:	fba3 1302 	umull	r1, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2164      	movs	r1, #100	; 0x64
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	3332      	adds	r3, #50	; 0x32
 80056e4:	4a08      	ldr	r2, [pc, #32]	; (8005708 <UART_SetConfig+0x4e4>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4422      	add	r2, r4
 80056f8:	609a      	str	r2, [r3, #8]
}
 80056fa:	bf00      	nop
 80056fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005700:	46bd      	mov	sp, r7
 8005702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005706:	bf00      	nop
 8005708:	51eb851f 	.word	0x51eb851f

0800570c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800570c:	b084      	sub	sp, #16
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	f107 001c 	add.w	r0, r7, #28
 800571a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2b01      	cmp	r3, #1
 8005722:	d122      	bne.n	800576a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d105      	bne.n	800575e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9c0 	bl	8005ae4 <USB_CoreReset>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e01a      	b.n	80057a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9b4 	bl	8005ae4 <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
 8005792:	e005      	b.n	80057a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10b      	bne.n	80057be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f043 0206 	orr.w	r2, r3, #6
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ca:	b004      	add	sp, #16
 80057cc:	4770      	bx	lr

080057ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f043 0201 	orr.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f023 0201 	bic.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d115      	bne.n	8005860 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005840:	2001      	movs	r0, #1
 8005842:	f7fb fbc9 	bl	8000fd8 <HAL_Delay>
      ms++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f93a 	bl	8005ac6 <USB_GetMode>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d01e      	beq.n	8005896 <USB_SetCurrentMode+0x84>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b31      	cmp	r3, #49	; 0x31
 800585c:	d9f0      	bls.n	8005840 <USB_SetCurrentMode+0x2e>
 800585e:	e01a      	b.n	8005896 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d115      	bne.n	8005892 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005872:	2001      	movs	r0, #1
 8005874:	f7fb fbb0 	bl	8000fd8 <HAL_Delay>
      ms++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f921 	bl	8005ac6 <USB_GetMode>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <USB_SetCurrentMode+0x84>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b31      	cmp	r3, #49	; 0x31
 800588e:	d9f0      	bls.n	8005872 <USB_SetCurrentMode+0x60>
 8005890:	e001      	b.n	8005896 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e005      	b.n	80058a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b32      	cmp	r3, #50	; 0x32
 800589a:	d101      	bne.n	80058a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01b      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf2      	bge.n	80058ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <USB_FlushTxFifo+0x64>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d0f0      	beq.n	80058e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a11      	ldr	r2, [pc, #68]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e018      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	daf2      	bge.n	8005920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2210      	movs	r2, #16
 8005942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <USB_FlushRxFifo+0x5c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e006      	b.n	8005964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d0f0      	beq.n	8005944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	00030d40 	.word	0x00030d40

08005974 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	4613      	mov	r3, r2
 8005988:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d123      	bne.n	80059e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800599a:	88bb      	ldrh	r3, [r7, #4]
 800599c:	3303      	adds	r3, #3
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e018      	b.n	80059da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	031a      	lsls	r2, r3, #12
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b4:	461a      	mov	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3e2      	bcc.n	80059a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3724      	adds	r7, #36	; 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e014      	b.n	8005a46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	3301      	adds	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	3301      	adds	r3, #1
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	3301      	adds	r3, #1
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3e6      	bcc.n	8005a1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01e      	beq.n	8005a92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	701a      	strb	r2, [r3, #0]
      i++;
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	3301      	adds	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a86:	8bfb      	ldrh	r3, [r7, #30]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ea      	bne.n	8005a68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	372c      	adds	r7, #44	; 0x2c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <USB_CoreReset+0x64>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e01b      	b.n	8005b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	daf2      	bge.n	8005af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f043 0201 	orr.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <USB_CoreReset+0x64>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d0f0      	beq.n	8005b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	00030d40 	.word	0x00030d40

08005b4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d10a      	bne.n	8005bbe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e014      	b.n	8005be8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e009      	b.n	8005be8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	f023 0304 	bic.w	r3, r3, #4
 8005be6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be8:	2110      	movs	r1, #16
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fe5e 	bl	80058ac <USB_FlushTxFifo>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe8a 	bl	8005914 <USB_FlushRxFifo>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e015      	b.n	8005c3c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3e5      	bcc.n	8005c10 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <USB_HostInit+0x16c>)
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <USB_HostInit+0x170>)
 8005c70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c74:	e009      	b.n	8005c8a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <USB_HostInit+0x174>)
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <USB_HostInit+0x178>)
 8005c86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f043 0210 	orr.w	r2, r3, #16
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <USB_HostInit+0x17c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb4:	b004      	add	sp, #16
 8005cb6:	4770      	bx	lr
 8005cb8:	01000200 	.word	0x01000200
 8005cbc:	00e00300 	.word	0x00e00300
 8005cc0:	00600080 	.word	0x00600080
 8005cc4:	004000e0 	.word	0x004000e0
 8005cc8:	a3200008 	.word	0xa3200008

08005ccc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d14:	461a      	mov	r2, r3
 8005d16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	e009      	b.n	8005d32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d106      	bne.n	8005d32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d70:	2064      	movs	r0, #100	; 0x64
 8005d72:	f7fb f931 	bl	8000fd8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d84:	200a      	movs	r0, #10
 8005d86:	f7fb f927 	bl	8000fd8 <HAL_Delay>

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005db8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <USB_DriveVbus+0x44>
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d106      	bne.n	8005dd8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d109      	bne.n	8005df8 <USB_DriveVbus+0x64>
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	0c5b      	lsrs	r3, r3, #17
 8005e24:	f003 0303 	and.w	r3, r3, #3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	b29b      	uxth	r3, r3
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	70fb      	strb	r3, [r7, #3]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70bb      	strb	r3, [r7, #2]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d87e      	bhi.n	8005f94 <USB_HC_Init+0x13c>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USB_HC_Init+0x44>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005f57 	.word	0x08005f57
 8005ea4:	08005ead 	.word	0x08005ead
 8005ea8:	08005f19 	.word	0x08005f19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ebe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ec0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	da10      	bge.n	8005eea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ee8:	e057      	b.n	8005f9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d051      	beq.n	8005f9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f14:	60d3      	str	r3, [r2, #12]
      break;
 8005f16:	e040      	b.n	8005f9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f24:	461a      	mov	r2, r3
 8005f26:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da34      	bge.n	8005f9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f54:	e023      	b.n	8005f9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	461a      	mov	r2, r3
 8005f64:	f240 2325 	movw	r3, #549	; 0x225
 8005f68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da17      	bge.n	8005fa2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f92:	e006      	b.n	8005fa2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	77fb      	strb	r3, [r7, #31]
      break;
 8005f98:	e004      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <USB_HC_Init+0x14c>
      break;
 8005fa2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	6939      	ldr	r1, [r7, #16]
 8005fda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da03      	bge.n	8005ffe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e001      	b.n	8006002 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff feff 	bl	8005e06 <USB_GetHostSpeed>
 8006008:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800600a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800600e:	2b02      	cmp	r3, #2
 8006010:	d106      	bne.n	8006020 <USB_HC_Init+0x1c8>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d003      	beq.n	8006020 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e001      	b.n	8006024 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006024:	787b      	ldrb	r3, [r7, #1]
 8006026:	059b      	lsls	r3, r3, #22
 8006028:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800602c:	78bb      	ldrb	r3, [r7, #2]
 800602e:	02db      	lsls	r3, r3, #11
 8006030:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006034:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800603a:	049b      	lsls	r3, r3, #18
 800603c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006040:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006042:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006048:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	0159      	lsls	r1, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	440b      	add	r3, r1
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006060:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d003      	beq.n	8006072 <USB_HC_Init+0x21a>
 800606a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10f      	bne.n	8006092 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006090:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	; 0x30
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02d      	beq.n	8006122 <USB_HC_StartXfer+0x86>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	791b      	ldrb	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d129      	bne.n	8006122 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d117      	bne.n	8006104 <USB_HC_StartXfer+0x68>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	79db      	ldrb	r3, [r3, #7]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <USB_HC_StartXfer+0x48>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	79db      	ldrb	r3, [r3, #7]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d10f      	bne.n	8006104 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <USB_HC_StartXfer+0x86>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	795b      	ldrb	r3, [r3, #5]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d107      	bne.n	8006122 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa0f 	bl	800653c <USB_DoPing>
      return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e0f8      	b.n	8006314 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	8912      	ldrh	r2, [r2, #8]
 8006132:	4413      	add	r3, r2
 8006134:	3b01      	subs	r3, #1
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	8912      	ldrh	r2, [r2, #8]
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006142:	8b7b      	ldrh	r3, [r7, #26]
 8006144:	429a      	cmp	r2, r3
 8006146:	d90b      	bls.n	8006160 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006148:	8b7b      	ldrh	r3, [r7, #26]
 800614a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800614c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	8912      	ldrh	r2, [r2, #8]
 8006152:	fb03 f202 	mul.w	r2, r3, r2
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	611a      	str	r2, [r3, #16]
 800615a:	e001      	b.n	8006160 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	8912      	ldrh	r2, [r2, #8]
 800616e:	fb03 f202 	mul.w	r2, r3, r2
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	611a      	str	r2, [r3, #16]
 8006176:	e003      	b.n	8006180 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	4b63      	ldr	r3, [pc, #396]	; (800631c <USB_HC_StartXfer+0x280>)
 800618e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006190:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	7a9b      	ldrb	r3, [r3, #10]
 8006196:	075b      	lsls	r3, r3, #29
 8006198:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	0148      	lsls	r0, r1, #5
 80061a0:	6a39      	ldr	r1, [r7, #32]
 80061a2:	4401      	add	r1, r0
 80061a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	68d9      	ldr	r1, [r3, #12]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	460a      	mov	r2, r1
 80061c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	7e7b      	ldrb	r3, [r7, #25]
 800620e:	075b      	lsls	r3, r3, #29
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	0148      	lsls	r0, r1, #5
 8006214:	6a39      	ldr	r1, [r7, #32]
 8006216:	4401      	add	r1, r0
 8006218:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006236:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e003      	b.n	8006252 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006250:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006258:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	461a      	mov	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e04e      	b.n	8006314 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	78db      	ldrb	r3, [r3, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d149      	bne.n	8006312 <USB_HC_StartXfer+0x276>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d045      	beq.n	8006312 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	79db      	ldrb	r3, [r3, #7]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d830      	bhi.n	80062f0 <USB_HC_StartXfer+0x254>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USB_HC_StartXfer+0x1f8>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062c9 	.word	0x080062c9
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	080062c9 	.word	0x080062c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	3303      	adds	r3, #3
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ae:	8afa      	ldrh	r2, [r7, #22]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d91c      	bls.n	80062f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80062c6:	e015      	b.n	80062f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	3303      	adds	r3, #3
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80062d2:	8afa      	ldrh	r2, [r7, #22]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	429a      	cmp	r2, r3
 80062e0:	d90a      	bls.n	80062f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80062ee:	e003      	b.n	80062f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80062f0:	bf00      	nop
 80062f2:	e002      	b.n	80062fa <USB_HC_StartXfer+0x25e>
        break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <USB_HC_StartXfer+0x25e>
        break;
 80062f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785a      	ldrb	r2, [r3, #1]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	b29b      	uxth	r3, r3
 8006308:	2000      	movs	r0, #0
 800630a:	9000      	str	r0, [sp, #0]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fb31 	bl	8005974 <USB_WritePacket>
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3728      	adds	r7, #40	; 0x28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	1ff80000 	.word	0x1ff80000

08006320 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	b29b      	uxth	r3, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006342:	b480      	push	{r7}
 8006344:	b089      	sub	sp, #36	; 0x24
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	0c9b      	lsrs	r3, r3, #18
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	0fdb      	lsrs	r3, r3, #31
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b20      	cmp	r3, #32
 8006390:	d104      	bne.n	800639c <USB_HC_Halt+0x5a>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e0c8      	b.n	800652e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <USB_HC_Halt+0x66>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d163      	bne.n	8006470 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 80ab 	bne.w	800652c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d133      	bne.n	800644a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006400:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	440a      	add	r2, r1
 8006418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006420:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
 8006426:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642e:	d81d      	bhi.n	800646c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006446:	d0ec      	beq.n	8006422 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006448:	e070      	b.n	800652c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	440a      	add	r2, r1
 8006460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006468:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800646a:	e05f      	b.n	800652c <USB_HC_Halt+0x1ea>
            break;
 800646c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800646e:	e05d      	b.n	800652c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	440a      	add	r2, r1
 8006486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d133      	bne.n	8006508 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ec:	d81d      	bhi.n	800652a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006504:	d0ec      	beq.n	80064e0 <USB_HC_Halt+0x19e>
 8006506:	e011      	b.n	800652c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e000      	b.n	800652c <USB_HC_Halt+0x1ea>
          break;
 800652a:	bf00      	nop
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3724      	adds	r7, #36	; 0x24
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	04da      	lsls	r2, r3, #19
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <USB_DoPing+0x74>)
 800655a:	4013      	ands	r3, r2
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800656c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006584:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	1ff80000 	.word	0x1ff80000

080065b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f911 	bl	80057f0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ce:	2110      	movs	r1, #16
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff f96b 	bl	80058ac <USB_FlushTxFifo>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f997 	bl	8005914 <USB_FlushRxFifo>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e01f      	b.n	8006636 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006614:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800661c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	3301      	adds	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d9dc      	bls.n	80065f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e034      	b.n	80066ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006658:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006668:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	461a      	mov	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006688:	d80c      	bhi.n	80066a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a0:	d0ec      	beq.n	800667c <USB_StopHost+0xc8>
 80066a2:	e000      	b.n	80066a6 <USB_StopHost+0xf2>
        break;
 80066a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b0f      	cmp	r3, #15
 80066b0:	d9c7      	bls.n	8006642 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b8:	461a      	mov	r2, r3
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff f880 	bl	80057ce <USB_EnableGlobalInt>

  return ret;
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af04      	add	r7, sp, #16
 80066de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066e0:	2301      	movs	r3, #1
 80066e2:	2202      	movs	r2, #2
 80066e4:	2102      	movs	r1, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc66 	bl	8006fb8 <USBH_FindInterface>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2bff      	cmp	r3, #255	; 0xff
 80066f4:	d002      	beq.n	80066fc <USBH_CDC_InterfaceInit+0x24>
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d901      	bls.n	8006700 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066fc:	2302      	movs	r3, #2
 80066fe:	e13d      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fc3b 	bl	8006f80 <USBH_SelectInterface>
 800670a:	4603      	mov	r3, r0
 800670c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006714:	2302      	movs	r3, #2
 8006716:	e131      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800671e:	2050      	movs	r0, #80	; 0x50
 8006720:	f002 fafa 	bl	8008d18 <malloc>
 8006724:	4603      	mov	r3, r0
 8006726:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	e11f      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800673c:	2250      	movs	r2, #80	; 0x50
 800673e:	2100      	movs	r1, #0
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f002 faf9 	bl	8008d38 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	211a      	movs	r1, #26
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	da15      	bge.n	800678a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	211a      	movs	r1, #26
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	211a      	movs	r1, #26
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 ff2c 	bl	80085ee <USBH_AllocPipe>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	7819      	ldrb	r1, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	7858      	ldrb	r0, [r3, #1]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	8952      	ldrh	r2, [r2, #10]
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	2203      	movs	r2, #3
 80067ba:	9201      	str	r2, [sp, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4623      	mov	r3, r4
 80067c0:	4602      	mov	r2, r0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fee4 	bl	8008590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 f9f3 	bl	8008bbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	210a      	movs	r1, #10
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fbeb 	bl	8006fb8 <USBH_FindInterface>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2bff      	cmp	r3, #255	; 0xff
 80067ea:	d002      	beq.n	80067f2 <USBH_CDC_InterfaceInit+0x11a>
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d901      	bls.n	80067f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	e0c2      	b.n	800697c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	211a      	movs	r1, #26
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	da16      	bge.n	800683c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	211a      	movs	r1, #26
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	211a      	movs	r1, #26
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006834:	881a      	ldrh	r2, [r3, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	835a      	strh	r2, [r3, #26]
 800683a:	e015      	b.n	8006868 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	211a      	movs	r1, #26
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	4413      	add	r3, r2
 8006848:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	211a      	movs	r1, #26
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006862:	881a      	ldrh	r2, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	211a      	movs	r1, #26
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b25b      	sxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	da16      	bge.n	80068ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	211a      	movs	r1, #26
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	4413      	add	r3, r2
 800688c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068a6:	881a      	ldrh	r2, [r3, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	835a      	strh	r2, [r3, #26]
 80068ac:	e015      	b.n	80068da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	211a      	movs	r1, #26
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7b9b      	ldrb	r3, [r3, #14]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe84 	bl	80085ee <USBH_AllocPipe>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7bdb      	ldrb	r3, [r3, #15]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fe7a 	bl	80085ee <USBH_AllocPipe>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	7b59      	ldrb	r1, [r3, #13]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7b98      	ldrb	r0, [r3, #14]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	8b12      	ldrh	r2, [r2, #24]
 800691a:	9202      	str	r2, [sp, #8]
 800691c:	2202      	movs	r2, #2
 800691e:	9201      	str	r2, [sp, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4623      	mov	r3, r4
 8006924:	4602      	mov	r2, r0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fe32 	bl	8008590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	7b19      	ldrb	r1, [r3, #12]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	7bd8      	ldrb	r0, [r3, #15]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	8b52      	ldrh	r2, [r2, #26]
 8006944:	9202      	str	r2, [sp, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	9201      	str	r2, [sp, #4]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4623      	mov	r3, r4
 800694e:	4602      	mov	r2, r0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fe1d 	bl	8008590 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7b5b      	ldrb	r3, [r3, #13]
 8006962:	2200      	movs	r2, #0
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 f928 	bl	8008bbc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 f921 	bl	8008bbc <USBH_LL_SetToggle>

  return USBH_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}

08006984 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fe12 	bl	80085ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe3d 	bl	8008630 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	7b1b      	ldrb	r3, [r3, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	7b1b      	ldrb	r3, [r3, #12]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fdff 	bl	80085ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fe2a 	bl	8008630 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	7b5b      	ldrb	r3, [r3, #13]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	7b5b      	ldrb	r3, [r3, #13]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fdec 	bl	80085ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	7b5b      	ldrb	r3, [r3, #13]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fe17 	bl	8008630 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f983 	bl	8008d28 <free>
    phost->pActiveClass->pData = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3340      	adds	r3, #64	; 0x40
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8b1 	bl	8006bb6 <GetLineCoding>
 8006a54:	4603      	mov	r3, r0
 8006a56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a64:	2102      	movs	r1, #2
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d877      	bhi.n	8006b88 <USBH_CDC_Process+0x114>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <USBH_CDC_Process+0x2c>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006ab5 	.word	0x08006ab5
 8006aa4:	08006abb 	.word	0x08006abb
 8006aa8:	08006aeb 	.word	0x08006aeb
 8006aac:	08006b5f 	.word	0x08006b5f
 8006ab0:	08006b6d 	.word	0x08006b6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab8:	e06d      	b.n	8006b96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f897 	bl	8006bf4 <SetLineCoding>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ad8:	e058      	b.n	8006b8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d055      	beq.n	8006b8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ae8:	e050      	b.n	8006b8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3340      	adds	r3, #64	; 0x40
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f860 	bl	8006bb6 <GetLineCoding>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d126      	bne.n	8006b4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	791b      	ldrb	r3, [r3, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d13b      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d133      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d12b      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d124      	bne.n	8006b90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f958 	bl	8006dfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b4c:	e020      	b.n	8006b90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d01d      	beq.n	8006b90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b5c:	e018      	b.n	8006b90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f867 	bl	8006c32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8da 	bl	8006d1e <CDC_ProcessReception>
      break;
 8006b6a:	e014      	b.n	8006b96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 ffef 	bl	8007b52 <USBH_ClrFeature>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b86:	e005      	b.n	8006b94 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b88:	bf00      	nop
 8006b8a:	e004      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e002      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b90:	bf00      	nop
 8006b92:	e000      	b.n	8006b96 <USBH_CDC_Process+0x122>
      break;
 8006b94:	bf00      	nop

  }

  return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	22a1      	movs	r2, #161	; 0xa1
 8006bc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2207      	movs	r2, #7
 8006bdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2207      	movs	r2, #7
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fa81 	bl	80080ec <USBH_CtlReq>
 8006bea:	4603      	mov	r3, r0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2221      	movs	r2, #33	; 0x21
 8006c02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2207      	movs	r2, #7
 8006c1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2207      	movs	r2, #7
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fa62 	bl	80080ec <USBH_CtlReq>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af02      	add	r7, sp, #8
 8006c38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d002      	beq.n	8006c58 <CDC_ProcessTransmission+0x26>
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d023      	beq.n	8006c9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c56:	e05e      	b.n	8006d16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	8b12      	ldrh	r2, [r2, #24]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d90b      	bls.n	8006c7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8b1a      	ldrh	r2, [r3, #24]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7b5b      	ldrb	r3, [r3, #13]
 8006c70:	2001      	movs	r0, #1
 8006c72:	9000      	str	r0, [sp, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fc48 	bl	800850a <USBH_BulkSendData>
 8006c7a:	e00b      	b.n	8006c94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	7b5b      	ldrb	r3, [r3, #13]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	9000      	str	r0, [sp, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fc3b 	bl	800850a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c9c:	e03b      	b.n	8006d16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 ff5f 	bl	8008b68 <USBH_LL_GetURBState>
 8006caa:	4603      	mov	r3, r0
 8006cac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d128      	bne.n	8006d06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	8b12      	ldrh	r2, [r2, #24]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d90e      	bls.n	8006cde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	8b12      	ldrh	r2, [r2, #24]
 8006cc8:	1a9a      	subs	r2, r3, r2
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	8b12      	ldrh	r2, [r2, #24]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	61da      	str	r2, [r3, #28]
 8006cdc:	e002      	b.n	8006ce4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cf4:	e00e      	b.n	8006d14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f868 	bl	8006dd4 <USBH_CDC_TransmitCallback>
      break;
 8006d04:	e006      	b.n	8006d14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d103      	bne.n	8006d14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d14:	bf00      	nop
  }
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d002      	beq.n	8006d44 <CDC_ProcessReception+0x26>
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00e      	beq.n	8006d60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d42:	e043      	b.n	8006dcc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6a19      	ldr	r1, [r3, #32]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	8b5a      	ldrh	r2, [r3, #26]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	7b1b      	ldrb	r3, [r3, #12]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fbff 	bl	8008554 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d5e:	e035      	b.n	8006dcc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	7b1b      	ldrb	r3, [r3, #12]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fefe 	bl	8008b68 <USBH_LL_GetURBState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d129      	bne.n	8006dca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fe61 	bl	8008a44 <USBH_LL_GetLastXferSize>
 8006d82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d016      	beq.n	8006dbc <CDC_ProcessReception+0x9e>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	8b5b      	ldrh	r3, [r3, #26]
 8006d92:	461a      	mov	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d910      	bls.n	8006dbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	441a      	add	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2203      	movs	r2, #3
 8006db6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dba:	e006      	b.n	8006dca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f80f 	bl	8006de8 <USBH_CDC_ReceiveCallback>
      break;
 8006dca:	bf00      	nop
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e24:	2302      	movs	r3, #2
 8006e26:	e029      	b.n	8006e7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	79fa      	ldrb	r2, [r7, #7]
 8006e2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f81f 	bl	8006e84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f001 fd31 	bl	80088dc <USBH_LL_Init>

  return USBH_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e009      	b.n	8006eaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	33e0      	adds	r3, #224	; 0xe0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b0f      	cmp	r3, #15
 8006eae:	d9f2      	bls.n	8006e96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e009      	b.n	8006eca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed0:	d3f1      	bcc.n	8006eb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	33de      	adds	r3, #222	; 0xde
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
 8006f66:	e004      	b.n	8006f72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e001      	b.n	8006f72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d204      	bcs.n	8006fa6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006fa4:	e001      	b.n	8006faa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	70fb      	strb	r3, [r7, #3]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70bb      	strb	r3, [r7, #2]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fe0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fe2:	e025      	b.n	8007030 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	221a      	movs	r2, #26
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	3308      	adds	r3, #8
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3302      	adds	r3, #2
 8006ff4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	795b      	ldrb	r3, [r3, #5]
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d002      	beq.n	8007006 <USBH_FindInterface+0x4e>
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	2bff      	cmp	r3, #255	; 0xff
 8007004:	d111      	bne.n	800702a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800700a:	78ba      	ldrb	r2, [r7, #2]
 800700c:	429a      	cmp	r2, r3
 800700e:	d002      	beq.n	8007016 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007010:	78bb      	ldrb	r3, [r7, #2]
 8007012:	2bff      	cmp	r3, #255	; 0xff
 8007014:	d109      	bne.n	800702a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800701a:	787a      	ldrb	r2, [r7, #1]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007020:	787b      	ldrb	r3, [r7, #1]
 8007022:	2bff      	cmp	r3, #255	; 0xff
 8007024:	d101      	bne.n	800702a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	e006      	b.n	8007038 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	3301      	adds	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d9d6      	bls.n	8006fe4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007036:	23ff      	movs	r3, #255	; 0xff
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fc81 	bl	8008954 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fd9a 	bl	8008b8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af04      	add	r7, sp, #16
 800706a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800706c:	2302      	movs	r3, #2
 800706e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d102      	bne.n	8007086 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2203      	movs	r2, #3
 8007084:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b0b      	cmp	r3, #11
 800708e:	f200 81be 	bhi.w	800740e <USBH_Process+0x3aa>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USBH_Process+0x34>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070c9 	.word	0x080070c9
 800709c:	080070fb 	.word	0x080070fb
 80070a0:	08007163 	.word	0x08007163
 80070a4:	080073a9 	.word	0x080073a9
 80070a8:	0800740f 	.word	0x0800740f
 80070ac:	08007207 	.word	0x08007207
 80070b0:	0800734f 	.word	0x0800734f
 80070b4:	0800723d 	.word	0x0800723d
 80070b8:	0800725d 	.word	0x0800725d
 80070bc:	0800727d 	.word	0x0800727d
 80070c0:	080072c1 	.word	0x080072c1
 80070c4:	08007391 	.word	0x08007391
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 819e 	beq.w	8007412 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070dc:	20c8      	movs	r0, #200	; 0xc8
 80070de:	f001 fd9d 	bl	8008c1c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fc93 	bl	8008a0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070f8:	e18b      	b.n	8007412 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007100:	2b01      	cmp	r3, #1
 8007102:	d107      	bne.n	8007114 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007112:	e18d      	b.n	8007430 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800711a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711e:	d914      	bls.n	800714a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007136:	2b03      	cmp	r3, #3
 8007138:	d903      	bls.n	8007142 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220d      	movs	r2, #13
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e176      	b.n	8007430 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
      break;
 8007148:	e172      	b.n	8007430 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007150:	f103 020a 	add.w	r2, r3, #10
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800715a:	200a      	movs	r0, #10
 800715c:	f001 fd5e 	bl	8008c1c <USBH_Delay>
      break;
 8007160:	e166      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007172:	2104      	movs	r1, #4
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007178:	2064      	movs	r0, #100	; 0x64
 800717a:	f001 fd4f 	bl	8008c1c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fc1e 	bl	80089c0 <USBH_LL_GetSpeed>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2205      	movs	r2, #5
 8007192:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fa29 	bl	80085ee <USBH_AllocPipe>
 800719c:	4603      	mov	r3, r0
 800719e:	461a      	mov	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa21 	bl	80085ee <USBH_AllocPipe>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7919      	ldrb	r1, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071c8:	b292      	uxth	r2, r2
 80071ca:	9202      	str	r2, [sp, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4603      	mov	r3, r0
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 f9da 	bl	8008590 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7959      	ldrb	r1, [r3, #5]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071f0:	b292      	uxth	r2, r2
 80071f2:	9202      	str	r2, [sp, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	4603      	mov	r3, r0
 80071fc:	2200      	movs	r2, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f9c6 	bl	8008590 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007204:	e114      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f918 	bl	800743c <USBH_HandleEnum>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 80fe 	bne.w	8007416 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007228:	2b01      	cmp	r3, #1
 800722a:	d103      	bne.n	8007234 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2208      	movs	r2, #8
 8007230:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007232:	e0f0      	b.n	8007416 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2207      	movs	r2, #7
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e0ec      	b.n	8007416 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80e9 	beq.w	800741a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800724e:	2101      	movs	r1, #1
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2208      	movs	r2, #8
 8007258:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800725a:	e0de      	b.n	800741a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007262:	b29b      	uxth	r3, r3
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc2c 	bl	8007ac4 <USBH_SetCfg>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 80d5 	bne.w	800741e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2209      	movs	r2, #9
 8007278:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800727a:	e0d0      	b.n	800741e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800728a:	2101      	movs	r1, #1
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc3c 	bl	8007b0a <USBH_SetFeature>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	220a      	movs	r2, #10
 80072a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a4:	e0bd      	b.n	8007422 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f040 80b9 	bne.w	8007422 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	220a      	movs	r2, #10
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	e0b4      	b.n	8007422 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	220a      	movs	r2, #10
 80072bc:	701a      	strb	r2, [r3, #0]
      break;
 80072be:	e0b0      	b.n	8007422 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80ad 	beq.w	8007426 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e016      	b.n	8007308 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072da:	7bfa      	ldrb	r2, [r7, #15]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32de      	adds	r2, #222	; 0xde
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	791a      	ldrb	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d108      	bne.n	8007302 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	32de      	adds	r2, #222	; 0xde
 80072f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007300:	e005      	b.n	800730e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	3301      	adds	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0e5      	beq.n	80072da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2206      	movs	r2, #6
 800732e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007336:	2103      	movs	r1, #3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e073      	b.n	8007426 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220d      	movs	r2, #13
 8007342:	701a      	strb	r2, [r3, #0]
      break;
 8007344:	e06f      	b.n	8007426 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	220d      	movs	r2, #13
 800734a:	701a      	strb	r2, [r3, #0]
      break;
 800734c:	e06b      	b.n	8007426 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d017      	beq.n	8007388 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220b      	movs	r2, #11
 8007374:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007376:	e058      	b.n	800742a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d154      	bne.n	800742a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	220d      	movs	r2, #13
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e050      	b.n	800742a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	220d      	movs	r2, #13
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e04c      	b.n	800742a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d049      	beq.n	800742e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      }
      break;
 80073a6:	e042      	b.n	800742e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fd67 	bl	8006e84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e4:	2105      	movs	r1, #5
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d107      	bne.n	8007406 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fe20 	bl	8007044 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007404:	e014      	b.n	8007430 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 faa4 	bl	8008954 <USBH_LL_Start>
      break;
 800740c:	e010      	b.n	8007430 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800740e:	bf00      	nop
 8007410:	e00e      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007412:	bf00      	nop
 8007414:	e00c      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007416:	bf00      	nop
 8007418:	e00a      	b.n	8007430 <USBH_Process+0x3cc>
    break;
 800741a:	bf00      	nop
 800741c:	e008      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800741e:	bf00      	nop
 8007420:	e006      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <USBH_Process+0x3cc>
      break;
 800742e:	bf00      	nop
  }
  return USBH_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af04      	add	r7, sp, #16
 8007442:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007448:	2301      	movs	r3, #1
 800744a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b07      	cmp	r3, #7
 8007452:	f200 81c1 	bhi.w	80077d8 <USBH_HandleEnum+0x39c>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBH_HandleEnum+0x20>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800753b 	.word	0x0800753b
 8007464:	080075a5 	.word	0x080075a5
 8007468:	08007633 	.word	0x08007633
 800746c:	0800769d 	.word	0x0800769d
 8007470:	0800770d 	.word	0x0800770d
 8007474:	08007753 	.word	0x08007753
 8007478:	08007799 	.word	0x08007799
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800747c:	2108      	movs	r1, #8
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa50 	bl	8007924 <USBH_Get_DevDesc>
 8007484:	4603      	mov	r3, r0
 8007486:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d130      	bne.n	80074f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7919      	ldrb	r1, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074b2:	b292      	uxth	r2, r2
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	9201      	str	r2, [sp, #4]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f865 	bl	8008590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7959      	ldrb	r1, [r3, #5]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074da:	b292      	uxth	r2, r2
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4603      	mov	r3, r0
 80074e6:	2200      	movs	r2, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f851 	bl	8008590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074ee:	e175      	b.n	80077dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8172 	bne.w	80077dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750e:	2b03      	cmp	r3, #3
 8007510:	d903      	bls.n	800751a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e160      	b.n	80077dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f885 	bl	8008630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f87f 	bl	8008630 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e150      	b.n	80077dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800753a:	2112      	movs	r1, #18
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9f1 	bl	8007924 <USBH_Get_DevDesc>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007552:	e145      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	f040 8142 	bne.w	80077e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	3301      	adds	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007572:	2b03      	cmp	r3, #3
 8007574:	d903      	bls.n	800757e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	220d      	movs	r2, #13
 800757a:	701a      	strb	r2, [r3, #0]
      break;
 800757c:	e130      	b.n	80077e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	795b      	ldrb	r3, [r3, #5]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f853 	bl	8008630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f84d 	bl	8008630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e11d      	b.n	80077e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa68 	bl	8007a7c <USBH_SetAddress>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d132      	bne.n	800761c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80075b6:	2002      	movs	r0, #2
 80075b8:	f001 fb30 	bl	8008c1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7919      	ldrb	r1, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075de:	b292      	uxth	r2, r2
 80075e0:	9202      	str	r2, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	9201      	str	r2, [sp, #4]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 ffcf 	bl	8008590 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7959      	ldrb	r1, [r3, #5]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007606:	b292      	uxth	r2, r2
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	2200      	movs	r2, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 ffbb 	bl	8008590 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800761a:	e0e3      	b.n	80077e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b03      	cmp	r3, #3
 8007620:	f040 80e0 	bne.w	80077e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220d      	movs	r2, #13
 8007628:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
      break;
 8007630:	e0d8      	b.n	80077e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007632:	2109      	movs	r1, #9
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f99d 	bl	8007974 <USBH_Get_CfgDesc>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2204      	movs	r2, #4
 8007648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800764a:	e0cd      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 80ca 	bne.w	80077e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765a:	3301      	adds	r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800766a:	2b03      	cmp	r3, #3
 800766c:	d903      	bls.n	8007676 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220d      	movs	r2, #13
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e0b8      	b.n	80077e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 ffd7 	bl	8008630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 ffd1 	bl	8008630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e0a5      	b.n	80077e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f965 	bl	8007974 <USBH_Get_CfgDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2205      	movs	r2, #5
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e097      	b.n	80077ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 8094 	bne.w	80077ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e082      	b.n	80077ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ff9f 	bl	8008630 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ff99 	bl	8008630 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e06f      	b.n	80077ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007712:	2b00      	cmp	r3, #0
 8007714:	d019      	beq.n	800774a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007722:	23ff      	movs	r3, #255	; 0xff
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f949 	bl	80079bc <USBH_Get_StringDesc>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2206      	movs	r2, #6
 8007738:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800773a:	e059      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d156      	bne.n	80077f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2206      	movs	r2, #6
 8007746:	705a      	strb	r2, [r3, #1]
      break;
 8007748:	e052      	b.n	80077f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2206      	movs	r2, #6
 800774e:	705a      	strb	r2, [r3, #1]
      break;
 8007750:	e04e      	b.n	80077f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007758:	2b00      	cmp	r3, #0
 800775a:	d019      	beq.n	8007790 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f926 	bl	80079bc <USBH_Get_StringDesc>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2207      	movs	r2, #7
 800777e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007780:	e038      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d135      	bne.n	80077f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2207      	movs	r2, #7
 800778c:	705a      	strb	r2, [r3, #1]
      break;
 800778e:	e031      	b.n	80077f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2207      	movs	r2, #7
 8007794:	705a      	strb	r2, [r3, #1]
      break;
 8007796:	e02d      	b.n	80077f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077ae:	23ff      	movs	r3, #255	; 0xff
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f903 	bl	80079bc <USBH_Get_StringDesc>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80077c4:	e018      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d115      	bne.n	80077f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
      break;
 80077d0:	e012      	b.n	80077f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
      break;
 80077d6:	e00f      	b.n	80077f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80077d8:	bf00      	nop
 80077da:	e00e      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077dc:	bf00      	nop
 80077de:	e00c      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e0:	bf00      	nop
 80077e2:	e00a      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e4:	bf00      	nop
 80077e6:	e008      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077e8:	bf00      	nop
 80077ea:	e006      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077ec:	bf00      	nop
 80077ee:	e004      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f0:	bf00      	nop
 80077f2:	e002      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f4:	bf00      	nop
 80077f6:	e000      	b.n	80077fa <USBH_HandleEnum+0x3be>
      break;
 80077f8:	bf00      	nop
  }
  return Status;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f804 	bl	8007846 <USBH_HandleSof>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b0b      	cmp	r3, #11
 8007856:	d10a      	bne.n	800786e <USBH_HandleSof+0x28>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
  }
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007886:	bf00      	nop
}
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078a2:	bf00      	nop
}
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f844 	bl	800898a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe91 	bl	8008630 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fe8b 	bl	8008630 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	b29b      	uxth	r3, r3
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f864 	bl	8007a12 <USBH_GetDescriptor>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f203 3026 	addw	r0, r3, #806	; 0x326
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	b292      	uxth	r2, r2
 8007964:	4619      	mov	r1, r3
 8007966:	f000 f918 	bl	8007b9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	331c      	adds	r3, #28
 8007984:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007986:	887b      	ldrh	r3, [r7, #2]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f83d 	bl	8007a12 <USBH_GetDescriptor>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80079a2:	887b      	ldrh	r3, [r7, #2]
 80079a4:	461a      	mov	r2, r3
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f987 	bl	8007cbc <USBH_ParseCfgDesc>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	461a      	mov	r2, r3
 80079c8:	460b      	mov	r3, r1
 80079ca:	72fb      	strb	r3, [r7, #11]
 80079cc:	4613      	mov	r3, r2
 80079ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079e0:	893b      	ldrh	r3, [r7, #8]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	460b      	mov	r3, r1
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f812 	bl	8007a12 <USBH_GetDescriptor>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079fe:	893a      	ldrh	r2, [r7, #8]
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb24 	bl	8008050 <USBH_ParseStringDesc>
  }

  return status;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	72fb      	strb	r3, [r7, #11]
 8007a20:	4613      	mov	r3, r2
 8007a22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d11c      	bne.n	8007a66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	893a      	ldrh	r2, [r7, #8]
 8007a42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a4e:	d104      	bne.n	8007a5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f240 4209 	movw	r2, #1033	; 0x409
 8007a56:	829a      	strh	r2, [r3, #20]
 8007a58:	e002      	b.n	8007a60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8b3a      	ldrh	r2, [r7, #24]
 8007a64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007a66:	8b3b      	ldrh	r3, [r7, #24]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fb3d 	bl	80080ec <USBH_CtlReq>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	789b      	ldrb	r3, [r3, #2]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10f      	bne.n	8007ab0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb19 	bl	80080ec <USBH_CtlReq>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	789b      	ldrb	r3, [r3, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10e      	bne.n	8007af6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 faf6 	bl	80080ec <USBH_CtlReq>
 8007b00:	4603      	mov	r3, r0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d10f      	bne.n	8007b3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fad2 	bl	80080ec <USBH_CtlReq>
 8007b48:	4603      	mov	r3, r0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10f      	bne.n	8007b86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 faae 	bl	80080ec <USBH_CtlReq>
 8007b90:	4603      	mov	r3, r0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	785a      	ldrb	r2, [r3, #1]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3303      	adds	r3, #3
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	791a      	ldrb	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	795a      	ldrb	r2, [r3, #5]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	799a      	ldrb	r2, [r3, #6]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	79da      	ldrb	r2, [r3, #7]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	79db      	ldrb	r3, [r3, #7]
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	dc11      	bgt.n	8007c20 <USBH_ParseDevDesc+0x86>
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	db16      	blt.n	8007c2e <USBH_ParseDevDesc+0x94>
 8007c00:	3b08      	subs	r3, #8
 8007c02:	2201      	movs	r2, #1
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bf14      	ite	ne
 8007c14:	2301      	movne	r3, #1
 8007c16:	2300      	moveq	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <USBH_ParseDevDesc+0x8a>
 8007c1e:	e006      	b.n	8007c2e <USBH_ParseDevDesc+0x94>
 8007c20:	2b40      	cmp	r3, #64	; 0x40
 8007c22:	d104      	bne.n	8007c2e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	79da      	ldrb	r2, [r3, #7]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	71da      	strb	r2, [r3, #7]
      break;
 8007c2c:	e003      	b.n	8007c36 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2240      	movs	r2, #64	; 0x40
 8007c32:	71da      	strb	r2, [r3, #7]
      break;
 8007c34:	bf00      	nop
  }

  if (length > 8U)
 8007c36:	88fb      	ldrh	r3, [r7, #6]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d939      	bls.n	8007cb0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3309      	adds	r3, #9
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	330a      	adds	r3, #10
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	330b      	adds	r3, #11
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	330c      	adds	r3, #12
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	330d      	adds	r3, #13
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	7b9a      	ldrb	r2, [r3, #14]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	7bda      	ldrb	r2, [r3, #15]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	7c1a      	ldrb	r2, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	7c5a      	ldrb	r2, [r3, #17]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	745a      	strb	r2, [r3, #17]
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08c      	sub	sp, #48	; 0x30
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cd0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	785a      	ldrb	r2, [r3, #1]
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3303      	adds	r3, #3
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	4313      	orrs	r3, r2
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d18:	bf28      	it	cs
 8007d1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	791a      	ldrb	r2, [r3, #4]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	795a      	ldrb	r2, [r3, #5]
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	799a      	ldrb	r2, [r3, #6]
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	79da      	ldrb	r2, [r3, #7]
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	7a1a      	ldrb	r2, [r3, #8]
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d002      	beq.n	8007d5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	2209      	movs	r2, #9
 8007d58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	f240 809d 	bls.w	8007e9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007d62:	2309      	movs	r3, #9
 8007d64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d6a:	e081      	b.n	8007e70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d6c:	f107 0316 	add.w	r3, r7, #22
 8007d70:	4619      	mov	r1, r3
 8007d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d74:	f000 f99f 	bl	80080b6 <USBH_GetNextDesc>
 8007d78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d176      	bne.n	8007e70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d002      	beq.n	8007d90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	2209      	movs	r2, #9
 8007d8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d94:	221a      	movs	r2, #26
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3302      	adds	r3, #2
 8007da2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da6:	69f8      	ldr	r0, [r7, #28]
 8007da8:	f000 f87e 	bl	8007ea8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007db6:	e043      	b.n	8007e40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007db8:	f107 0316 	add.w	r3, r7, #22
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc0:	f000 f979 	bl	80080b6 <USBH_GetNextDesc>
 8007dc4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d138      	bne.n	8007e40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10f      	bne.n	8007df6 <USBH_ParseCfgDesc+0x13a>
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	799b      	ldrb	r3, [r3, #6]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d10b      	bne.n	8007df6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	79db      	ldrb	r3, [r3, #7]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10f      	bne.n	8007e06 <USBH_ParseCfgDesc+0x14a>
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d00b      	beq.n	8007e06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	2209      	movs	r2, #9
 8007df2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007df4:	e007      	b.n	8007e06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b07      	cmp	r3, #7
 8007dfc:	d004      	beq.n	8007e08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2207      	movs	r2, #7
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	e000      	b.n	8007e08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e10:	3201      	adds	r2, #1
 8007e12:	00d2      	lsls	r2, r2, #3
 8007e14:	211a      	movs	r1, #26
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
 8007e20:	4413      	add	r3, r2
 8007e22:	3304      	adds	r3, #4
 8007e24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e28:	69b9      	ldr	r1, [r7, #24]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f86b 	bl	8007f06 <USBH_ParseEPDesc>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	791b      	ldrb	r3, [r3, #4]
 8007e44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d204      	bcs.n	8007e56 <USBH_ParseCfgDesc+0x19a>
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	885a      	ldrh	r2, [r3, #2]
 8007e50:	8afb      	ldrh	r3, [r7, #22]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d8b0      	bhi.n	8007db8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d201      	bcs.n	8007e66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e01c      	b.n	8007ea0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d805      	bhi.n	8007e84 <USBH_ParseCfgDesc+0x1c8>
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	885a      	ldrh	r2, [r3, #2]
 8007e7c:	8afb      	ldrh	r3, [r7, #22]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f63f af74 	bhi.w	8007d6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	bf28      	it	cs
 8007e8c:	2302      	movcs	r3, #2
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d201      	bcs.n	8007e9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e001      	b.n	8007ea0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3730      	adds	r7, #48	; 0x30
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	785a      	ldrb	r2, [r3, #1]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	789a      	ldrb	r2, [r3, #2]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	78da      	ldrb	r2, [r3, #3]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	791a      	ldrb	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	795a      	ldrb	r2, [r3, #5]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	799a      	ldrb	r2, [r3, #6]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	79da      	ldrb	r2, [r3, #7]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	7a1a      	ldrb	r2, [r3, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	721a      	strb	r2, [r3, #8]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b087      	sub	sp, #28
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	785a      	ldrb	r2, [r3, #1]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	789a      	ldrb	r2, [r3, #2]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	78da      	ldrb	r2, [r3, #3]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3305      	adds	r3, #5
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	799a      	ldrb	r2, [r3, #6]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
 8007f66:	e033      	b.n	8007fd0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	889b      	ldrh	r3, [r3, #4]
 8007f6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	889b      	ldrh	r3, [r3, #4]
 8007f7e:	b21a      	sxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b299      	uxth	r1, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3305      	adds	r3, #5
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	430b      	orrs	r3, r1
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d110      	bne.n	8007fc2 <USBH_ParseEPDesc+0xbc>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b299      	uxth	r1, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3305      	adds	r3, #5
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbe:	b21b      	sxth	r3, r3
 8007fc0:	e001      	b.n	8007fc6 <USBH_ParseEPDesc+0xc0>
 8007fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b21b      	sxth	r3, r3
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d116      	bne.n	8008008 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	78db      	ldrb	r3, [r3, #3]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d005      	beq.n	8007ff2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d127      	bne.n	8008042 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	799b      	ldrb	r3, [r3, #6]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <USBH_ParseEPDesc+0xfc>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	799b      	ldrb	r3, [r3, #6]
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d91f      	bls.n	8008042 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008002:	2303      	movs	r3, #3
 8008004:	75fb      	strb	r3, [r7, #23]
 8008006:	e01c      	b.n	8008042 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	78db      	ldrb	r3, [r3, #3]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b01      	cmp	r3, #1
 8008012:	d10a      	bne.n	800802a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	799b      	ldrb	r3, [r3, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <USBH_ParseEPDesc+0x11e>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	799b      	ldrb	r3, [r3, #6]
 8008020:	2b10      	cmp	r3, #16
 8008022:	d90e      	bls.n	8008042 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008024:	2303      	movs	r3, #3
 8008026:	75fb      	strb	r3, [r7, #23]
 8008028:	e00b      	b.n	8008042 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	2b03      	cmp	r3, #3
 8008034:	d105      	bne.n	8008042 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	799b      	ldrb	r3, [r3, #6]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800803e:	2303      	movs	r3, #3
 8008040:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
}
 8008044:	4618      	mov	r0, r3
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d120      	bne.n	80080aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	1e9a      	subs	r2, r3, #2
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	4293      	cmp	r3, r2
 8008072:	bf28      	it	cs
 8008074:	4613      	movcs	r3, r2
 8008076:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3302      	adds	r3, #2
 800807c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800807e:	2300      	movs	r3, #0
 8008080:	82fb      	strh	r3, [r7, #22]
 8008082:	e00b      	b.n	800809c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008084:	8afb      	ldrh	r3, [r7, #22]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	781a      	ldrb	r2, [r3, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3301      	adds	r3, #1
 8008094:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008096:	8afb      	ldrh	r3, [r7, #22]
 8008098:	3302      	adds	r3, #2
 800809a:	82fb      	strh	r3, [r7, #22]
 800809c:	8afa      	ldrh	r2, [r7, #22]
 800809e:	8abb      	ldrh	r3, [r7, #20]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d3ef      	bcc.n	8008084 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
  }
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	881a      	ldrh	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4413      	add	r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080de:	68fb      	ldr	r3, [r7, #12]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	789b      	ldrb	r3, [r3, #2]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d002      	beq.n	800810c <USBH_CtlReq+0x20>
 8008106:	2b02      	cmp	r3, #2
 8008108:	d00f      	beq.n	800812a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800810a:	e027      	b.n	800815c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	88fa      	ldrh	r2, [r7, #6]
 8008116:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2202      	movs	r2, #2
 8008122:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008124:	2301      	movs	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]
      break;
 8008128:	e018      	b.n	800815c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f81c 	bl	8008168 <USBH_HandleControl>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <USBH_CtlReq+0x54>
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b03      	cmp	r3, #3
 800813e:	d106      	bne.n	800814e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	761a      	strb	r2, [r3, #24]
      break;
 800814c:	e005      	b.n	800815a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d102      	bne.n	800815a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	709a      	strb	r2, [r3, #2]
      break;
 800815a:	bf00      	nop
  }
  return status;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008170:	2301      	movs	r3, #1
 8008172:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008174:	2300      	movs	r3, #0
 8008176:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7e1b      	ldrb	r3, [r3, #24]
 800817c:	3b01      	subs	r3, #1
 800817e:	2b0a      	cmp	r3, #10
 8008180:	f200 8156 	bhi.w	8008430 <USBH_HandleControl+0x2c8>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <USBH_HandleControl+0x24>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	080081b9 	.word	0x080081b9
 8008190:	080081d3 	.word	0x080081d3
 8008194:	0800823d 	.word	0x0800823d
 8008198:	08008263 	.word	0x08008263
 800819c:	0800829b 	.word	0x0800829b
 80081a0:	080082c5 	.word	0x080082c5
 80081a4:	08008317 	.word	0x08008317
 80081a8:	08008339 	.word	0x08008339
 80081ac:	08008375 	.word	0x08008375
 80081b0:	0800839b 	.word	0x0800839b
 80081b4:	080083d9 	.word	0x080083d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f103 0110 	add.w	r1, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	795b      	ldrb	r3, [r3, #5]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f943 	bl	8008450 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	761a      	strb	r2, [r3, #24]
      break;
 80081d0:	e139      	b.n	8008446 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	795b      	ldrb	r3, [r3, #5]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fcc5 	bl	8008b68 <USBH_LL_GetURBState>
 80081de:	4603      	mov	r3, r0
 80081e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d11e      	bne.n	8008226 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7c1b      	ldrb	r3, [r3, #16]
 80081ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8adb      	ldrh	r3, [r3, #22]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	2b80      	cmp	r3, #128	; 0x80
 80081fe:	d103      	bne.n	8008208 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2203      	movs	r2, #3
 8008204:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008206:	e115      	b.n	8008434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2205      	movs	r2, #5
 800820c:	761a      	strb	r2, [r3, #24]
      break;
 800820e:	e111      	b.n	8008434 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008210:	7b7b      	ldrb	r3, [r7, #13]
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d103      	bne.n	800821e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2209      	movs	r2, #9
 800821a:	761a      	strb	r2, [r3, #24]
      break;
 800821c:	e10a      	b.n	8008434 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2207      	movs	r2, #7
 8008222:	761a      	strb	r2, [r3, #24]
      break;
 8008224:	e106      	b.n	8008434 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d003      	beq.n	8008234 <USBH_HandleControl+0xcc>
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b02      	cmp	r3, #2
 8008230:	f040 8100 	bne.w	8008434 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	220b      	movs	r2, #11
 8008238:	761a      	strb	r2, [r3, #24]
      break;
 800823a:	e0fb      	b.n	8008434 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6899      	ldr	r1, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	899a      	ldrh	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	791b      	ldrb	r3, [r3, #4]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f93a 	bl	80084ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	761a      	strb	r2, [r3, #24]
      break;
 8008260:	e0f1      	b.n	8008446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc7d 	bl	8008b68 <USBH_LL_GetURBState>
 800826e:	4603      	mov	r3, r0
 8008270:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d102      	bne.n	800827e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2209      	movs	r2, #9
 800827c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b05      	cmp	r3, #5
 8008282:	d102      	bne.n	800828a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008288:	e0d6      	b.n	8008438 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b04      	cmp	r3, #4
 800828e:	f040 80d3 	bne.w	8008438 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	220b      	movs	r2, #11
 8008296:	761a      	strb	r2, [r3, #24]
      break;
 8008298:	e0ce      	b.n	8008438 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6899      	ldr	r1, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	899a      	ldrh	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	795b      	ldrb	r3, [r3, #5]
 80082a6:	2001      	movs	r0, #1
 80082a8:	9000      	str	r0, [sp, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f8ea 	bl	8008484 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2206      	movs	r2, #6
 80082c0:	761a      	strb	r2, [r3, #24]
      break;
 80082c2:	e0c0      	b.n	8008446 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	795b      	ldrb	r3, [r3, #5]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fc4c 	bl	8008b68 <USBH_LL_GetURBState>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d103      	bne.n	80082e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2207      	movs	r2, #7
 80082de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082e0:	e0ac      	b.n	800843c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d105      	bne.n	80082f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220c      	movs	r2, #12
 80082ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
      break;
 80082f2:	e0a3      	b.n	800843c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d103      	bne.n	8008302 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2205      	movs	r2, #5
 80082fe:	761a      	strb	r2, [r3, #24]
      break;
 8008300:	e09c      	b.n	800843c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b04      	cmp	r3, #4
 8008306:	f040 8099 	bne.w	800843c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	220b      	movs	r2, #11
 800830e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e092      	b.n	800843c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	791b      	ldrb	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8d5 	bl	80084ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2208      	movs	r2, #8
 8008334:	761a      	strb	r2, [r3, #24]

      break;
 8008336:	e086      	b.n	8008446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	791b      	ldrb	r3, [r3, #4]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fc12 	bl	8008b68 <USBH_LL_GetURBState>
 8008344:	4603      	mov	r3, r0
 8008346:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d105      	bne.n	800835a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	220d      	movs	r2, #13
 8008352:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008358:	e072      	b.n	8008440 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b04      	cmp	r3, #4
 800835e:	d103      	bne.n	8008368 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	220b      	movs	r2, #11
 8008364:	761a      	strb	r2, [r3, #24]
      break;
 8008366:	e06b      	b.n	8008440 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b05      	cmp	r3, #5
 800836c:	d168      	bne.n	8008440 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e065      	b.n	8008440 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	795b      	ldrb	r3, [r3, #5]
 8008378:	2201      	movs	r2, #1
 800837a:	9200      	str	r2, [sp, #0]
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f87f 	bl	8008484 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	220a      	movs	r2, #10
 8008396:	761a      	strb	r2, [r3, #24]
      break;
 8008398:	e055      	b.n	8008446 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	795b      	ldrb	r3, [r3, #5]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fbe1 	bl	8008b68 <USBH_LL_GetURBState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d105      	bne.n	80083bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	220d      	movs	r2, #13
 80083b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083ba:	e043      	b.n	8008444 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d103      	bne.n	80083ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2209      	movs	r2, #9
 80083c6:	761a      	strb	r2, [r3, #24]
      break;
 80083c8:	e03c      	b.n	8008444 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d139      	bne.n	8008444 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220b      	movs	r2, #11
 80083d4:	761a      	strb	r2, [r3, #24]
      break;
 80083d6:	e035      	b.n	8008444 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	7e5b      	ldrb	r3, [r3, #25]
 80083dc:	3301      	adds	r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	765a      	strb	r2, [r3, #25]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7e5b      	ldrb	r3, [r3, #25]
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d806      	bhi.n	80083fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80083f8:	e025      	b.n	8008446 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008400:	2106      	movs	r1, #6
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	795b      	ldrb	r3, [r3, #5]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f90c 	bl	8008630 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f906 	bl	8008630 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800842a:	2302      	movs	r3, #2
 800842c:	73fb      	strb	r3, [r7, #15]
      break;
 800842e:	e00a      	b.n	8008446 <USBH_HandleControl+0x2de>

    default:
      break;
 8008430:	bf00      	nop
 8008432:	e008      	b.n	8008446 <USBH_HandleControl+0x2de>
      break;
 8008434:	bf00      	nop
 8008436:	e006      	b.n	8008446 <USBH_HandleControl+0x2de>
      break;
 8008438:	bf00      	nop
 800843a:	e004      	b.n	8008446 <USBH_HandleControl+0x2de>
      break;
 800843c:	bf00      	nop
 800843e:	e002      	b.n	8008446 <USBH_HandleControl+0x2de>
      break;
 8008440:	bf00      	nop
 8008442:	e000      	b.n	8008446 <USBH_HandleControl+0x2de>
      break;
 8008444:	bf00      	nop
  }

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af04      	add	r7, sp, #16
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800845e:	79f9      	ldrb	r1, [r7, #7]
 8008460:	2300      	movs	r3, #0
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	2308      	movs	r3, #8
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	2300      	movs	r3, #0
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	2200      	movs	r2, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fb46 	bl	8008b06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af04      	add	r7, sp, #16
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	80fb      	strh	r3, [r7, #6]
 8008496:	4613      	mov	r3, r2
 8008498:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084a8:	7979      	ldrb	r1, [r7, #5]
 80084aa:	7e3b      	ldrb	r3, [r7, #24]
 80084ac:	9303      	str	r3, [sp, #12]
 80084ae:	88fb      	ldrh	r3, [r7, #6]
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	2301      	movs	r3, #1
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	2300      	movs	r3, #0
 80084bc:	2200      	movs	r2, #0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fb21 	bl	8008b06 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b088      	sub	sp, #32
 80084d2:	af04      	add	r7, sp, #16
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	4611      	mov	r1, r2
 80084da:	461a      	mov	r2, r3
 80084dc:	460b      	mov	r3, r1
 80084de:	80fb      	strh	r3, [r7, #6]
 80084e0:	4613      	mov	r3, r2
 80084e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084e4:	7979      	ldrb	r1, [r7, #5]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9303      	str	r3, [sp, #12]
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	9302      	str	r3, [sp, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	2301      	movs	r3, #1
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	2300      	movs	r3, #0
 80084f8:	2201      	movs	r2, #1
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fb03 	bl	8008b06 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008500:	2300      	movs	r3, #0

}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b088      	sub	sp, #32
 800850e:	af04      	add	r7, sp, #16
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	4611      	mov	r1, r2
 8008516:	461a      	mov	r2, r3
 8008518:	460b      	mov	r3, r1
 800851a:	80fb      	strh	r3, [r7, #6]
 800851c:	4613      	mov	r3, r2
 800851e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800852e:	7979      	ldrb	r1, [r7, #5]
 8008530:	7e3b      	ldrb	r3, [r7, #24]
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	2301      	movs	r3, #1
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2302      	movs	r3, #2
 8008542:	2200      	movs	r2, #0
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fade 	bl	8008b06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af04      	add	r7, sp, #16
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4611      	mov	r1, r2
 8008560:	461a      	mov	r2, r3
 8008562:	460b      	mov	r3, r1
 8008564:	80fb      	strh	r3, [r7, #6]
 8008566:	4613      	mov	r3, r2
 8008568:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800856a:	7979      	ldrb	r1, [r7, #5]
 800856c:	2300      	movs	r3, #0
 800856e:	9303      	str	r3, [sp, #12]
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	9302      	str	r3, [sp, #8]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	2301      	movs	r3, #1
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	2302      	movs	r3, #2
 800857e:	2201      	movs	r2, #1
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fac0 	bl	8008b06 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af04      	add	r7, sp, #16
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	4608      	mov	r0, r1
 800859a:	4611      	mov	r1, r2
 800859c:	461a      	mov	r2, r3
 800859e:	4603      	mov	r3, r0
 80085a0:	70fb      	strb	r3, [r7, #3]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70bb      	strb	r3, [r7, #2]
 80085a6:	4613      	mov	r3, r2
 80085a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80085aa:	7878      	ldrb	r0, [r7, #1]
 80085ac:	78ba      	ldrb	r2, [r7, #2]
 80085ae:	78f9      	ldrb	r1, [r7, #3]
 80085b0:	8b3b      	ldrh	r3, [r7, #24]
 80085b2:	9302      	str	r3, [sp, #8]
 80085b4:	7d3b      	ldrb	r3, [r7, #20]
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	7c3b      	ldrb	r3, [r7, #16]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	4603      	mov	r3, r0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa53 	bl	8008a6a <USBH_LL_OpenPipe>

  return USBH_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa72 	bl	8008ac8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f836 	bl	800866c <USBH_GetFreePipe>
 8008600:	4603      	mov	r3, r0
 8008602:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800860a:	4293      	cmp	r3, r2
 800860c:	d00a      	beq.n	8008624 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	89fb      	ldrh	r3, [r7, #14]
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	33e0      	adds	r3, #224	; 0xe0
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	440b      	add	r3, r1
 8008622:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008624:	89fb      	ldrh	r3, [r7, #14]
 8008626:	b2db      	uxtb	r3, r3
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	2b0f      	cmp	r3, #15
 8008640:	d80d      	bhi.n	800865e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	33e0      	adds	r3, #224	; 0xe0
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	33e0      	adds	r3, #224	; 0xe0
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
 800867c:	e00f      	b.n	800869e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	33e0      	adds	r3, #224	; 0xe0
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	b29b      	uxth	r3, r3
 8008696:	e007      	b.n	80086a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	3301      	adds	r3, #1
 800869c:	73fb      	strb	r3, [r7, #15]
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	2b0f      	cmp	r3, #15
 80086a2:	d9ec      	bls.n	800867e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80086a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80086b8:	2201      	movs	r2, #1
 80086ba:	490e      	ldr	r1, [pc, #56]	; (80086f4 <MX_USB_HOST_Init+0x40>)
 80086bc:	480e      	ldr	r0, [pc, #56]	; (80086f8 <MX_USB_HOST_Init+0x44>)
 80086be:	f7fe fba7 	bl	8006e10 <USBH_Init>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80086c8:	f7f8 f9b4 	bl	8000a34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80086cc:	490b      	ldr	r1, [pc, #44]	; (80086fc <MX_USB_HOST_Init+0x48>)
 80086ce:	480a      	ldr	r0, [pc, #40]	; (80086f8 <MX_USB_HOST_Init+0x44>)
 80086d0:	f7fe fc2c 	bl	8006f2c <USBH_RegisterClass>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80086da:	f7f8 f9ab 	bl	8000a34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80086de:	4806      	ldr	r0, [pc, #24]	; (80086f8 <MX_USB_HOST_Init+0x44>)
 80086e0:	f7fe fcb0 	bl	8007044 <USBH_Start>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80086ea:	f7f8 f9a3 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08008715 	.word	0x08008715
 80086f8:	20000204 	.word	0x20000204
 80086fc:	2000001c 	.word	0x2000001c

08008700 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008704:	4802      	ldr	r0, [pc, #8]	; (8008710 <MX_USB_HOST_Process+0x10>)
 8008706:	f7fe fcad 	bl	8007064 <USBH_Process>
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000204 	.word	0x20000204

08008714 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	3b01      	subs	r3, #1
 8008724:	2b04      	cmp	r3, #4
 8008726:	d819      	bhi.n	800875c <USBH_UserProcess+0x48>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <USBH_UserProcess+0x1c>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	0800875d 	.word	0x0800875d
 8008734:	0800874d 	.word	0x0800874d
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008755 	.word	0x08008755
 8008740:	08008745 	.word	0x08008745
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008744:	4b09      	ldr	r3, [pc, #36]	; (800876c <USBH_UserProcess+0x58>)
 8008746:	2203      	movs	r2, #3
 8008748:	701a      	strb	r2, [r3, #0]
  break;
 800874a:	e008      	b.n	800875e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <USBH_UserProcess+0x58>)
 800874e:	2202      	movs	r2, #2
 8008750:	701a      	strb	r2, [r3, #0]
  break;
 8008752:	e004      	b.n	800875e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <USBH_UserProcess+0x58>)
 8008756:	2201      	movs	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
  break;
 800875a:	e000      	b.n	800875e <USBH_UserProcess+0x4a>

  default:
  break;
 800875c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	200005dc 	.word	0x200005dc

08008770 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	60da      	str	r2, [r3, #12]
 8008786:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008790:	d147      	bne.n	8008822 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	4b25      	ldr	r3, [pc, #148]	; (800882c <HAL_HCD_MspInit+0xbc>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	4a24      	ldr	r2, [pc, #144]	; (800882c <HAL_HCD_MspInit+0xbc>)
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	6313      	str	r3, [r2, #48]	; 0x30
 80087a2:	4b22      	ldr	r3, [pc, #136]	; (800882c <HAL_HCD_MspInit+0xbc>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80087ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087bc:	f107 0314 	add.w	r3, r7, #20
 80087c0:	4619      	mov	r1, r3
 80087c2:	481b      	ldr	r0, [pc, #108]	; (8008830 <HAL_HCD_MspInit+0xc0>)
 80087c4:	f7f8 fdd0 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80087c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80087cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ce:	2302      	movs	r3, #2
 80087d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087d6:	2300      	movs	r3, #0
 80087d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087da:	230a      	movs	r3, #10
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087de:	f107 0314 	add.w	r3, r7, #20
 80087e2:	4619      	mov	r1, r3
 80087e4:	4812      	ldr	r0, [pc, #72]	; (8008830 <HAL_HCD_MspInit+0xc0>)
 80087e6:	f7f8 fdbf 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ea:	4b10      	ldr	r3, [pc, #64]	; (800882c <HAL_HCD_MspInit+0xbc>)
 80087ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ee:	4a0f      	ldr	r2, [pc, #60]	; (800882c <HAL_HCD_MspInit+0xbc>)
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	6353      	str	r3, [r2, #52]	; 0x34
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <HAL_HCD_MspInit+0xbc>)
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	4a0b      	ldr	r2, [pc, #44]	; (800882c <HAL_HCD_MspInit+0xbc>)
 8008800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008804:	6453      	str	r3, [r2, #68]	; 0x44
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_HCD_MspInit+0xbc>)
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008812:	2200      	movs	r2, #0
 8008814:	2100      	movs	r1, #0
 8008816:	2043      	movs	r0, #67	; 0x43
 8008818:	f7f8 fcdd 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800881c:	2043      	movs	r0, #67	; 0x43
 800881e:	f7f8 fcf6 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008822:	bf00      	nop
 8008824:	3728      	adds	r7, #40	; 0x28
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	40023800 	.word	0x40023800
 8008830:	40020000 	.word	0x40020000

08008834 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe ffed 	bl	8007822 <USBH_LL_IncTimer>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff f825 	bl	80078ae <USBH_LL_Connect>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff f82e 	bl	80078dc <USBH_LL_Disconnect>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
 8008894:	4613      	mov	r3, r2
 8008896:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe ffdf 	bl	8007876 <USBH_LL_PortEnabled>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe ffdf 	bl	8007892 <USBH_LL_PortDisabled>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d12a      	bne.n	8008944 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80088ee:	4a18      	ldr	r2, [pc, #96]	; (8008950 <USBH_LL_Init+0x74>)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a15      	ldr	r2, [pc, #84]	; (8008950 <USBH_LL_Init+0x74>)
 80088fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <USBH_LL_Init+0x74>)
 8008900:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008904:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008906:	4b12      	ldr	r3, [pc, #72]	; (8008950 <USBH_LL_Init+0x74>)
 8008908:	2208      	movs	r2, #8
 800890a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <USBH_LL_Init+0x74>)
 800890e:	2201      	movs	r2, #1
 8008910:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <USBH_LL_Init+0x74>)
 8008914:	2200      	movs	r2, #0
 8008916:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <USBH_LL_Init+0x74>)
 800891a:	2202      	movs	r2, #2
 800891c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <USBH_LL_Init+0x74>)
 8008920:	2200      	movs	r2, #0
 8008922:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008924:	480a      	ldr	r0, [pc, #40]	; (8008950 <USBH_LL_Init+0x74>)
 8008926:	f7f8 feee 	bl	8001706 <HAL_HCD_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008930:	f7f8 f880 	bl	8000a34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008934:	4806      	ldr	r0, [pc, #24]	; (8008950 <USBH_LL_Init+0x74>)
 8008936:	f7f9 fad2 	bl	8001ede <HAL_HCD_GetCurrentFrame>
 800893a:	4603      	mov	r3, r0
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7fe ff60 	bl	8007804 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200005e0 	.word	0x200005e0

08008954 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800896a:	4618      	mov	r0, r3
 800896c:	f7f9 fa41 	bl	8001df2 <HAL_HCD_Start>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f95c 	bl	8008c34 <USBH_Get_USB_Status>
 800897c:	4603      	mov	r3, r0
 800897e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008980:	7bbb      	ldrb	r3, [r7, #14]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7f9 fa49 	bl	8001e38 <HAL_HCD_Stop>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f941 	bl	8008c34 <USBH_Get_USB_Status>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7f9 fa91 	bl	8001efa <HAL_HCD_GetCurrentSpeed>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d00c      	beq.n	80089f8 <USBH_LL_GetSpeed+0x38>
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d80d      	bhi.n	80089fe <USBH_LL_GetSpeed+0x3e>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <USBH_LL_GetSpeed+0x2c>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d003      	beq.n	80089f2 <USBH_LL_GetSpeed+0x32>
 80089ea:	e008      	b.n	80089fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
    break;
 80089f0:	e008      	b.n	8008a04 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80089f2:	2301      	movs	r3, #1
 80089f4:	73fb      	strb	r3, [r7, #15]
    break;
 80089f6:	e005      	b.n	8008a04 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80089f8:	2302      	movs	r3, #2
 80089fa:	73fb      	strb	r3, [r7, #15]
    break;
 80089fc:	e002      	b.n	8008a04 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80089fe:	2301      	movs	r3, #1
 8008a00:	73fb      	strb	r3, [r7, #15]
    break;
 8008a02:	bf00      	nop
  }
  return  speed;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7f9 fa24 	bl	8001e72 <HAL_HCD_ResetPort>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f8ff 	bl	8008c34 <USBH_Get_USB_Status>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f9 fa2b 	bl	8001eb6 <HAL_HCD_HC_GetXferCount>
 8008a60:	4603      	mov	r3, r0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a6a:	b590      	push	{r4, r7, lr}
 8008a6c:	b089      	sub	sp, #36	; 0x24
 8008a6e:	af04      	add	r7, sp, #16
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	4608      	mov	r0, r1
 8008a74:	4611      	mov	r1, r2
 8008a76:	461a      	mov	r2, r3
 8008a78:	4603      	mov	r3, r0
 8008a7a:	70fb      	strb	r3, [r7, #3]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70bb      	strb	r3, [r7, #2]
 8008a80:	4613      	mov	r3, r2
 8008a82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a92:	787c      	ldrb	r4, [r7, #1]
 8008a94:	78ba      	ldrb	r2, [r7, #2]
 8008a96:	78f9      	ldrb	r1, [r7, #3]
 8008a98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	f7f8 fe8e 	bl	80017ca <HAL_HCD_HC_Init>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8bd 	bl	8008c34 <USBH_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f8 fefe 	bl	80018e8 <HAL_HCD_HC_Halt>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f89e 	bl	8008c34 <USBH_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b06:	b590      	push	{r4, r7, lr}
 8008b08:	b089      	sub	sp, #36	; 0x24
 8008b0a:	af04      	add	r7, sp, #16
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	461a      	mov	r2, r3
 8008b14:	4603      	mov	r3, r0
 8008b16:	70fb      	strb	r3, [r7, #3]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70bb      	strb	r3, [r7, #2]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b2e:	787c      	ldrb	r4, [r7, #1]
 8008b30:	78ba      	ldrb	r2, [r7, #2]
 8008b32:	78f9      	ldrb	r1, [r7, #3]
 8008b34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b38:	9303      	str	r3, [sp, #12]
 8008b3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b3c:	9302      	str	r3, [sp, #8]
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4623      	mov	r3, r4
 8008b4a:	f7f8 fef1 	bl	8001930 <HAL_HCD_HC_SubmitRequest>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f86d 	bl	8008c34 <USBH_Get_USB_Status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd90      	pop	{r4, r7, pc}

08008b68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f9 f985 	bl	8001e8e <HAL_HCD_HC_GetURBState>
 8008b84:	4603      	mov	r3, r0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d103      	bne.n	8008bac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f870 	bl	8008c8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008bac:	20c8      	movs	r0, #200	; 0xc8
 8008bae:	f7f8 fa13 	bl	8000fd8 <HAL_Delay>
  return USBH_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	212c      	movs	r1, #44	; 0x2c
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	333b      	adds	r3, #59	; 0x3b
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	212c      	movs	r1, #44	; 0x2c
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3354      	adds	r3, #84	; 0x54
 8008bf6:	78ba      	ldrb	r2, [r7, #2]
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e008      	b.n	8008c0e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	212c      	movs	r1, #44	; 0x2c
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	4413      	add	r3, r2
 8008c08:	3355      	adds	r3, #85	; 0x55
 8008c0a:	78ba      	ldrb	r2, [r7, #2]
 8008c0c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7f8 f9d7 	bl	8000fd8 <HAL_Delay>
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d817      	bhi.n	8008c78 <USBH_Get_USB_Status+0x44>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <USBH_Get_USB_Status+0x1c>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c61 	.word	0x08008c61
 8008c54:	08008c67 	.word	0x08008c67
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c73 	.word	0x08008c73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e00b      	b.n	8008c7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e008      	b.n	8008c7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e005      	b.n	8008c7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008c72:	2302      	movs	r3, #2
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	e002      	b.n	8008c7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7c:	bf00      	nop
  }
  return usb_status;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c96:	79fb      	ldrb	r3, [r7, #7]
 8008c98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e001      	b.n	8008caa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	461a      	mov	r2, r3
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4803      	ldr	r0, [pc, #12]	; (8008cc0 <MX_DriverVbusFS+0x34>)
 8008cb2:	f7f8 fcf5 	bl	80016a0 <HAL_GPIO_WritePin>
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40020800 	.word	0x40020800

08008cc4 <__errno>:
 8008cc4:	4b01      	ldr	r3, [pc, #4]	; (8008ccc <__errno+0x8>)
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	2000003c 	.word	0x2000003c

08008cd0 <__libc_init_array>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	4d0d      	ldr	r5, [pc, #52]	; (8008d08 <__libc_init_array+0x38>)
 8008cd4:	4c0d      	ldr	r4, [pc, #52]	; (8008d0c <__libc_init_array+0x3c>)
 8008cd6:	1b64      	subs	r4, r4, r5
 8008cd8:	10a4      	asrs	r4, r4, #2
 8008cda:	2600      	movs	r6, #0
 8008cdc:	42a6      	cmp	r6, r4
 8008cde:	d109      	bne.n	8008cf4 <__libc_init_array+0x24>
 8008ce0:	4d0b      	ldr	r5, [pc, #44]	; (8008d10 <__libc_init_array+0x40>)
 8008ce2:	4c0c      	ldr	r4, [pc, #48]	; (8008d14 <__libc_init_array+0x44>)
 8008ce4:	f000 f942 	bl	8008f6c <_init>
 8008ce8:	1b64      	subs	r4, r4, r5
 8008cea:	10a4      	asrs	r4, r4, #2
 8008cec:	2600      	movs	r6, #0
 8008cee:	42a6      	cmp	r6, r4
 8008cf0:	d105      	bne.n	8008cfe <__libc_init_array+0x2e>
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf8:	4798      	blx	r3
 8008cfa:	3601      	adds	r6, #1
 8008cfc:	e7ee      	b.n	8008cdc <__libc_init_array+0xc>
 8008cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d02:	4798      	blx	r3
 8008d04:	3601      	adds	r6, #1
 8008d06:	e7f2      	b.n	8008cee <__libc_init_array+0x1e>
 8008d08:	08008fa8 	.word	0x08008fa8
 8008d0c:	08008fa8 	.word	0x08008fa8
 8008d10:	08008fa8 	.word	0x08008fa8
 8008d14:	08008fac 	.word	0x08008fac

08008d18 <malloc>:
 8008d18:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <malloc+0xc>)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f000 b87f 	b.w	8008e20 <_malloc_r>
 8008d22:	bf00      	nop
 8008d24:	2000003c 	.word	0x2000003c

08008d28 <free>:
 8008d28:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <free+0xc>)
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	f000 b80b 	b.w	8008d48 <_free_r>
 8008d32:	bf00      	nop
 8008d34:	2000003c 	.word	0x2000003c

08008d38 <memset>:
 8008d38:	4402      	add	r2, r0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d100      	bne.n	8008d42 <memset+0xa>
 8008d40:	4770      	bx	lr
 8008d42:	f803 1b01 	strb.w	r1, [r3], #1
 8008d46:	e7f9      	b.n	8008d3c <memset+0x4>

08008d48 <_free_r>:
 8008d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	d044      	beq.n	8008dd8 <_free_r+0x90>
 8008d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d52:	9001      	str	r0, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5a:	bfb8      	it	lt
 8008d5c:	18e4      	addlt	r4, r4, r3
 8008d5e:	f000 f8f7 	bl	8008f50 <__malloc_lock>
 8008d62:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <_free_r+0x94>)
 8008d64:	9801      	ldr	r0, [sp, #4]
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	b933      	cbnz	r3, 8008d78 <_free_r+0x30>
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	6014      	str	r4, [r2, #0]
 8008d6e:	b003      	add	sp, #12
 8008d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d74:	f000 b8f2 	b.w	8008f5c <__malloc_unlock>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d908      	bls.n	8008d8e <_free_r+0x46>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf01      	itttt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	1949      	addeq	r1, r1, r5
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	e7ed      	b.n	8008d6a <_free_r+0x22>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	b10b      	cbz	r3, 8008d98 <_free_r+0x50>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d9fa      	bls.n	8008d8e <_free_r+0x46>
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	1855      	adds	r5, r2, r1
 8008d9c:	42a5      	cmp	r5, r4
 8008d9e:	d10b      	bne.n	8008db8 <_free_r+0x70>
 8008da0:	6824      	ldr	r4, [r4, #0]
 8008da2:	4421      	add	r1, r4
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	d1e0      	bne.n	8008d6e <_free_r+0x26>
 8008dac:	681c      	ldr	r4, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	4421      	add	r1, r4
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	e7da      	b.n	8008d6e <_free_r+0x26>
 8008db8:	d902      	bls.n	8008dc0 <_free_r+0x78>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6003      	str	r3, [r0, #0]
 8008dbe:	e7d6      	b.n	8008d6e <_free_r+0x26>
 8008dc0:	6825      	ldr	r5, [r4, #0]
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	bf04      	itt	eq
 8008dc8:	6819      	ldreq	r1, [r3, #0]
 8008dca:	685b      	ldreq	r3, [r3, #4]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	bf04      	itt	eq
 8008dd0:	1949      	addeq	r1, r1, r5
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6054      	str	r4, [r2, #4]
 8008dd6:	e7ca      	b.n	8008d6e <_free_r+0x26>
 8008dd8:	b003      	add	sp, #12
 8008dda:	bd30      	pop	{r4, r5, pc}
 8008ddc:	200008e4 	.word	0x200008e4

08008de0 <sbrk_aligned>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4e0e      	ldr	r6, [pc, #56]	; (8008e1c <sbrk_aligned+0x3c>)
 8008de4:	460c      	mov	r4, r1
 8008de6:	6831      	ldr	r1, [r6, #0]
 8008de8:	4605      	mov	r5, r0
 8008dea:	b911      	cbnz	r1, 8008df2 <sbrk_aligned+0x12>
 8008dec:	f000 f88c 	bl	8008f08 <_sbrk_r>
 8008df0:	6030      	str	r0, [r6, #0]
 8008df2:	4621      	mov	r1, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 f887 	bl	8008f08 <_sbrk_r>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d00a      	beq.n	8008e14 <sbrk_aligned+0x34>
 8008dfe:	1cc4      	adds	r4, r0, #3
 8008e00:	f024 0403 	bic.w	r4, r4, #3
 8008e04:	42a0      	cmp	r0, r4
 8008e06:	d007      	beq.n	8008e18 <sbrk_aligned+0x38>
 8008e08:	1a21      	subs	r1, r4, r0
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f87c 	bl	8008f08 <_sbrk_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	d101      	bne.n	8008e18 <sbrk_aligned+0x38>
 8008e14:	f04f 34ff 	mov.w	r4, #4294967295
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	200008e8 	.word	0x200008e8

08008e20 <_malloc_r>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	1ccd      	adds	r5, r1, #3
 8008e26:	f025 0503 	bic.w	r5, r5, #3
 8008e2a:	3508      	adds	r5, #8
 8008e2c:	2d0c      	cmp	r5, #12
 8008e2e:	bf38      	it	cc
 8008e30:	250c      	movcc	r5, #12
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	4607      	mov	r7, r0
 8008e36:	db01      	blt.n	8008e3c <_malloc_r+0x1c>
 8008e38:	42a9      	cmp	r1, r5
 8008e3a:	d905      	bls.n	8008e48 <_malloc_r+0x28>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	2600      	movs	r6, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	4e2e      	ldr	r6, [pc, #184]	; (8008f04 <_malloc_r+0xe4>)
 8008e4a:	f000 f881 	bl	8008f50 <__malloc_lock>
 8008e4e:	6833      	ldr	r3, [r6, #0]
 8008e50:	461c      	mov	r4, r3
 8008e52:	bb34      	cbnz	r4, 8008ea2 <_malloc_r+0x82>
 8008e54:	4629      	mov	r1, r5
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ffc2 	bl	8008de0 <sbrk_aligned>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	4604      	mov	r4, r0
 8008e60:	d14d      	bne.n	8008efe <_malloc_r+0xde>
 8008e62:	6834      	ldr	r4, [r6, #0]
 8008e64:	4626      	mov	r6, r4
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d140      	bne.n	8008eec <_malloc_r+0xcc>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4638      	mov	r0, r7
 8008e70:	eb04 0803 	add.w	r8, r4, r3
 8008e74:	f000 f848 	bl	8008f08 <_sbrk_r>
 8008e78:	4580      	cmp	r8, r0
 8008e7a:	d13a      	bne.n	8008ef2 <_malloc_r+0xd2>
 8008e7c:	6821      	ldr	r1, [r4, #0]
 8008e7e:	3503      	adds	r5, #3
 8008e80:	1a6d      	subs	r5, r5, r1
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff ffa5 	bl	8008de0 <sbrk_aligned>
 8008e96:	3001      	adds	r0, #1
 8008e98:	d02b      	beq.n	8008ef2 <_malloc_r+0xd2>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	442b      	add	r3, r5
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	e00e      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	1b52      	subs	r2, r2, r5
 8008ea6:	d41e      	bmi.n	8008ee6 <_malloc_r+0xc6>
 8008ea8:	2a0b      	cmp	r2, #11
 8008eaa:	d916      	bls.n	8008eda <_malloc_r+0xba>
 8008eac:	1961      	adds	r1, r4, r5
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	bf18      	it	ne
 8008eb4:	6059      	strne	r1, [r3, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	bf08      	it	eq
 8008eba:	6031      	streq	r1, [r6, #0]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f104 060b 	add.w	r6, r4, #11
 8008ec6:	f000 f849 	bl	8008f5c <__malloc_unlock>
 8008eca:	f026 0607 	bic.w	r6, r6, #7
 8008ece:	1d23      	adds	r3, r4, #4
 8008ed0:	1af2      	subs	r2, r6, r3
 8008ed2:	d0b6      	beq.n	8008e42 <_malloc_r+0x22>
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	50a3      	str	r3, [r4, r2]
 8008ed8:	e7b3      	b.n	8008e42 <_malloc_r+0x22>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	bf0c      	ite	eq
 8008ee0:	6032      	streq	r2, [r6, #0]
 8008ee2:	605a      	strne	r2, [r3, #4]
 8008ee4:	e7ec      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	6864      	ldr	r4, [r4, #4]
 8008eea:	e7b2      	b.n	8008e52 <_malloc_r+0x32>
 8008eec:	4634      	mov	r4, r6
 8008eee:	6876      	ldr	r6, [r6, #4]
 8008ef0:	e7b9      	b.n	8008e66 <_malloc_r+0x46>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f000 f830 	bl	8008f5c <__malloc_unlock>
 8008efc:	e7a1      	b.n	8008e42 <_malloc_r+0x22>
 8008efe:	6025      	str	r5, [r4, #0]
 8008f00:	e7de      	b.n	8008ec0 <_malloc_r+0xa0>
 8008f02:	bf00      	nop
 8008f04:	200008e4 	.word	0x200008e4

08008f08 <_sbrk_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	; (8008f24 <_sbrk_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f7 ff7c 	bl	8000e10 <_sbrk>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_sbrk_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_sbrk_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	200008ec 	.word	0x200008ec

08008f28 <strncmp>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	b17a      	cbz	r2, 8008f4c <strncmp+0x24>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	3901      	subs	r1, #1
 8008f30:	1884      	adds	r4, r0, r2
 8008f32:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f3a:	4290      	cmp	r0, r2
 8008f3c:	d101      	bne.n	8008f42 <strncmp+0x1a>
 8008f3e:	42a3      	cmp	r3, r4
 8008f40:	d101      	bne.n	8008f46 <strncmp+0x1e>
 8008f42:	1a80      	subs	r0, r0, r2
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d1f3      	bne.n	8008f32 <strncmp+0xa>
 8008f4a:	e7fa      	b.n	8008f42 <strncmp+0x1a>
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	e7f9      	b.n	8008f44 <strncmp+0x1c>

08008f50 <__malloc_lock>:
 8008f50:	4801      	ldr	r0, [pc, #4]	; (8008f58 <__malloc_lock+0x8>)
 8008f52:	f000 b809 	b.w	8008f68 <__retarget_lock_acquire_recursive>
 8008f56:	bf00      	nop
 8008f58:	200008f0 	.word	0x200008f0

08008f5c <__malloc_unlock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_unlock+0x8>)
 8008f5e:	f000 b804 	b.w	8008f6a <__retarget_lock_release_recursive>
 8008f62:	bf00      	nop
 8008f64:	200008f0 	.word	0x200008f0

08008f68 <__retarget_lock_acquire_recursive>:
 8008f68:	4770      	bx	lr

08008f6a <__retarget_lock_release_recursive>:
 8008f6a:	4770      	bx	lr

08008f6c <_init>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr

08008f78 <_fini>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr
